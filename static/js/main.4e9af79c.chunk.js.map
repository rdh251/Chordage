{"version":3,"sources":["Header.js","constants/actionTypes.js","constants/music.js","classes/generalChord.js","classes/specificChord.js","reducers/index.js","store/index.js","Cards.js","actions/index.js","Tab.js","Tabs.js","Selector.js","rootSelector.js","modeSelector.js","triSelector.js","extSelector.js","defineChordPanel.js","chordViz.js","chordTab.js","chordBackdrop.js","boardViz.js","boardBackdrop.js","App.js","serviceWorker.js","index.js"],"names":["Component","CHANGE_PROGRESSION","CHANGE_ACTIVE_INDEX","CHANGE_ROOT","CHANGE_ACCIDENTAL","CHANGE_MODE","CHANGE_TRI_NOTES","CHANGE_EXT_NOTES","CHANGE_DIAGRAM_INDEX","CHANGE_SELECTED_CHORD","A","B","D","E","G","SHARP","NATURAL","FLAT","IONIAN","general_note","the_root","the_accidental","Object","classCallCheck","this","root","accidental","general_chord","mode","tri_notes","ext_notes","createClass","key","value","string_name","k","i","generalCopy","clone","old","temp_string","E_note","chord_finder","_this","findChordNotes","the_scale","find_general_scale","notes_in_chord","length","Math","floor","push","getFingerPositions","tuning","h_fret_bound","l_fret_bound","high_fret_bound","low_fret_bound","chord_notes","tuning_temp_indexes","start_fret","indexOf","console","log","string_potentials","j","temp_index","the_note","the_index","index","note","arr","n","indices","Array","fill","all_the_chords","new_chord","lowest_fret","highest_fret","val","next","active_strings","required_notes","general_notes","stepper","step_start","build_flat_scale","top_7","step_finder","build_sharp_scale","concat","flat_scale","sharp_scale","flat_fail","flat_count","previous_root","sharp_fail","sharp_count","TUNING","chord1","chord2","chord3","chord4","find_chords","specific_arr1","scale1","specific_arr2","scale2","specific_arr3","scale3","initialState","active_index","chords","specific_chords","selected_indices","visible_diagram_indices","scales","colors","theReducer","state","arguments","undefined","action","type","payload","new_spec_arr","new_scale","new_chords","slice","new_specific_chords","new_selected_indices","new_visible_diagram_indices","new_scales","splice","assign","new_index","copy_me","the_clone","new_arr","visible_diagrams","diagram_index","selected_chords","visible_index","store","createStore","connected_card1","props","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","id","className","map","color","style","background-color","connected_card2","optionClicker","setState","showMenu","optionSelector","string","dispatch","setChord","cp_options","_this$props","test","cp_button","onClick","bind","Card1","connect","Card2","Tab","label","_this$props2","activeTab","label_arr","split","Tabs","onClickTabItem","tab","children","child","src_Tab","connected_Selector","handleScroll","assertThisInitialized","el","document","getElementById","scrollOffset","scrollLeft","itemWidth","offsetWidth","list","onScroll","getNameAsString","Selector","connected_RSelect","rootClicker","showRMenu","rootSelector","letter","accClicker","showAMenu","accSelector","symbol","r","_this$state","RSelect","connected_MSelect","modeClicker","modeSelector","MSelect","connected_TSelect","triItemOnClick","tri_list_items","bool","styles","color_index","border","TSelect","connected_ESelect","extItemOnClick","ext_list_items","ESelect","DCPanel","class","src_rootSelector","src_modeSelector","triSelector","extSelector","connected_ChordViz","makeSVG","notes","scale","string_number","string_span","x_coords","y_coords","fret_number","chord_span","fret_x2","circle_radius","radius_str","hi_fret","lo_fret","diagram_base","chord_shift","shifted_notes","margin","width","height","y_coord","x1","y1","x2","y2","stroke","x","y","x_coord","x_center","y_center","cx","cy","changeDiagramIndex","selected_chord_index","ChordViz","connected_ChordBackdrop","specific_chords_length","visible_diagram_index","left_arrow","right_arrow","chordViz","ChordBackdrop","connected_BoardViz","the_chord","BoardViz","connected_BoardBackdrop","boardViz","BoardBackdrop","App","opt","viewClicker","view_progression","rotation","scrollTop","scrollHeight","clientHeight","transform","backdrop","triRotate","boardBackdrop","chordBackdrop","src_Selector","src_Tabs","defineChordPanel","marginBottom","marginTop","textAlign","to","scroll_percentage","perTick","scrolling","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e9af79c.chunk.js","sourcesContent":["// Copyright 2019 Ross Hall\r\nimport React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            view_progression: false,\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <h1>Chordage</h1>\r\n                <div id='view-progression'>\r\n                    <h5 id='view-text'>View Progression</h5>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\nexport default Header;","// Copyright 2019 Ross Hall\r\nexport const CHANGE_PROGRESSION = 'CHANGE_PROGRESSION';\r\nexport const CHANGE_ACTIVE_INDEX = 'CHANGE_ACTIVE_INDEX';\r\nexport const CHANGE_ROOT = 'CHANGE_ROOT';\r\nexport const CHANGE_ACCIDENTAL = 'CHANGE_ACCIDENTAL';\r\nexport const CHANGE_MODE = 'CHANGE_MODE';\r\nexport const CHANGE_TRI_NOTES = 'CHANGE_TRI_NOTES';\r\nexport const CHANGE_EXT_NOTES = 'CHANGE_EXT_NOTES';\r\nexport const CHANGE_DIAGRAM_INDEX = 'CHANGE_DIAGRAM_INDEX';\r\nexport const CHANGE_SELECTED_CHORD = 'CHANGE_SELECTED_CHORDS';\r\n","// Copyright 2019 Ross Hall\r\n/* Notes ******************************/\r\nexport const A = 'A';\r\nexport const B = 'B';\r\nexport const C = 'C';\r\nexport const D = 'D';\r\nexport const E = 'E';\r\nexport const F = 'F';\r\nexport const G = 'G';\r\n\r\n/* Accidentals *************************/\r\nexport const SHARP = '\\u266F';\r\nexport const NATURAL = '\\u266E';\r\nexport const FLAT = '\\u266D';\r\n\r\n/* Modes *******************************/\r\nexport const IONIAN = 'Ionian';\r\nexport const DORIAN = 'Dorian';\r\nexport const PHRYGIAN = 'Phrygian';\r\nexport const LYDIAN = 'Lydian';\r\nexport const MIXOLYDIAN = 'Mixolydian';\r\nexport const AEOLIAN = 'Aeolian';\r\nexport const LOCRIAN = 'Locrian';","// Copyright 2019 Ross Hall\r\nimport {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\n\r\nexport class general_note {\r\n    constructor(the_root, the_accidental) {\r\n        this.root = the_root;\r\n        this.accidental = the_accidental;\r\n    }\r\n}\r\n\r\nexport class general_chord {\r\n    constructor() {\r\n        this.root = A;\r\n        this.accidental = NATURAL \r\n        this.mode = IONIAN;\r\n        this.tri_notes = [true, true, true];\r\n        this.ext_notes = [false, false, false, false];\r\n    }\r\n    getNameAsString() {\r\n        let string_name = this.root\r\n        if (this.accidental !== NATURAL) {\r\n            string_name += this.accidental;\r\n        }\r\n        if (this.mode === IONIAN ||\r\n            this.mode === LYDIAN) {\r\n                string_name += 'maj';\r\n        } else if (this.mode === MIXOLYDIAN) {\r\n            string_name += 'dom';\r\n        } else if (this.mode === LOCRIAN) {\r\n            string_name += 'dim';\r\n        }\r\n        else {\r\n            string_name += 'min'\r\n        }\r\n        let k = 0;\r\n        for (let i = 7; i <= 13; i += 2) {\r\n            if (this.ext_notes[k]) {\r\n                string_name = string_name + ' ' + i;\r\n            }\r\n            k++;\r\n        }\r\n        return string_name;\r\n    }\r\n}\r\nexport function generalCopy(clone, old) {\r\n    clone.root = old.root;\r\n    clone.accidental = old.accidental;\r\n    clone.mode = old.mode;\r\n    clone.tri_notes = old.tri_notes;\r\n    clone.ext_notes = old.ext_notes;\r\n}","// Copyright 2019 Ross Hall \r\nimport {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\nimport {\r\n    general_chord,\r\n    general_note\r\n} from './generalChord.js';\r\n\r\nexport class note_instance {\r\n    constructor(fret_number, string_number) {\r\n        this.fret = fret_number;\r\n        this.string = string_number;\r\n    }\r\n}\r\nexport class chord_instance {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E];\r\n\r\n    }\r\n}\r\nlet temp_string = [E, F, '*', G, '*', A, '*', B, C, '*', D, '*' ];\r\nlet E_note = new general_note(E, NATURAL)\r\nlet A_note = new general_note(A, NATURAL)\r\nlet D_note = new general_note(D, NATURAL)\r\nlet G_note = new general_note(G, NATURAL)\r\nlet B_note = new general_note(B, NATURAL)\r\nlet TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\nexport class chord_finder {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E]; \r\n        this.active_strings = [true, false, true, true, true, false];\r\n        this.low_fret_bound = 3;\r\n        this.high_fret_bound = 7;\r\n        this.required_notes= [];\r\n        this.general_notes=[];\r\n    }\r\n    find_general_scale(general_chord){\r\n        let general_notes = [new general_note(general_chord.root, general_chord.accidental)];\r\n        let stepper = [2, 2, 1, 2, 2, 2, 1]; // whole tone or halftone step orderings\r\n        let mode = general_chord.mode;\r\n        \r\n        let step_start = 0\r\n        if (mode === DORIAN) {\r\n            step_start += 1;\r\n        } else if (mode === PHRYGIAN) {\r\n             step_start += 2;\r\n        } else if (mode === LYDIAN) {\r\n            step_start += 3;    \r\n        } else if (mode === MIXOLYDIAN) {\r\n            step_start += 4;    \r\n        } else if (mode === AEOLIAN) {\r\n            step_start += 5;    \r\n        } else if (mode === LOCRIAN) {\r\n            step_start += 6;    \r\n        }\r\n        let build_flat_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                if (temp_string[index] === '*') {\r\n                    if(index + 1 === temp_string.length) {\r\n                        top_7.push(new general_note(temp_string[0], FLAT));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index + 1], FLAT));\r\n\r\n                    }\r\n                } else {\r\n\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n            }\r\n            return top_7; \r\n        }\r\n        let build_sharp_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                if (temp_string[index] == '*') {\r\n                    if(index - 1 < 0) {\r\n                        top_7.push(new general_note(temp_string[12], SHARP));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index-1], SHARP));\r\n                    }\r\n                } else {\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n            }\r\n            return top_7; \r\n        }\r\n        let start_fret = temp_string.indexOf(general_chord.root);\r\n        if (general_chord.accidental === FLAT) {\r\n            start_fret--;\r\n            if (start_fret < 0) {\r\n                start_fret = temp_string.length - 1;\r\n            }\r\n            general_notes = general_notes.concat(build_flat_scale(start_fret));\r\n            return(general_notes);\r\n\r\n        } else if (general_chord.accidental === SHARP) {\r\n            start_fret++;\r\n            if (start_fret >= temp_string.length){\r\n                start_fret = 0;\r\n            }\r\n            general_notes = general_notes.concat(build_sharp_scale(start_fret));\r\n            return(general_notes);\r\n        } else {\r\n            let flat_scale = general_notes.concat(build_flat_scale(start_fret));\r\n            let sharp_scale = general_notes.concat(build_sharp_scale(start_fret));\r\n            let flat_fail = false;\r\n            let flat_count = 0;\r\n            let previous_root = null;\r\n            for (let i = 0; i < flat_scale.length; i++) {\r\n                if (previous_root === flat_scale[i].root) {\r\n                    flat_fail = true;\r\n                }\r\n                if (flat_scale[i].accidental === FLAT) {\r\n                    flat_count++;\r\n                }\r\n                previous_root = flat_scale[i].root;\r\n            }\r\n            let sharp_fail = false;\r\n            let sharp_count = 0;\r\n            previous_root=null;\r\n            for (let i = 0; i < sharp_scale.length; i++) {\r\n                if (previous_root === sharp_scale[i].root){\r\n                    sharp_fail = true;\r\n                    //break;\r\n                }\r\n                if (sharp_scale[i].accidental === SHARP) {\r\n                    sharp_count++;\r\n                }\r\n                previous_root = sharp_scale[i].root;\r\n            }\r\n            if (sharp_fail) {\r\n                return flat_scale;\r\n            } else if (flat_fail) {\r\n                return sharp_scale;\r\n            } else {\r\n                if (sharp_count < flat_count) {\r\n                    return sharp_scale;\r\n                } else {\r\n                    return flat_scale;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    findChordNotes = (general_chord) => {\r\n        let the_scale = this.find_general_scale(general_chord);\r\n        let notes_in_chord = []\r\n        for(let i = 0; i < the_scale.length; i++) {\r\n            if(i === 0 || i === 2 || i === 4) {\r\n                if(general_chord.tri_notes[Math.floor(i/2)]){\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            } else {\r\n                if (general_chord.ext_notes[i%6]) {\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            }\r\n        }\r\n        //console.log(notes_in_chord);\r\n        return notes_in_chord;\r\n    }\r\n    getFingerPositions = (general_chord, tuning, h_fret_bound, l_fret_bound) => {\r\n        this.high_fret_bound = h_fret_bound;\r\n        this.low_fret_bound = l_fret_bound;\r\n        let chord_notes = this.findChordNotes(general_chord);\r\n        let tuning_temp_indexes = [];\r\n        for (let i = 0; i < tuning.length; i++) {\r\n            let start_fret = temp_string.indexOf(tuning[i].root);\r\n            if (tuning[i].accidental === FLAT) {\r\n                start_fret--;\r\n                if (start_fret < 0) {\r\n                    start_fret = temp_string.length - 1;\r\n                } \r\n            } else if (general_chord.accidental === SHARP) {\r\n                //start_fret++;\r\n                if (start_fret >= temp_string.length){\r\n                    start_fret = 0;\r\n                }\r\n            }\r\n            tuning_temp_indexes.push(start_fret);\r\n        }\r\n        console.log('^^^^^^^^^^^^');\r\n        console.log(chord_notes);\r\n        console.log(tuning_temp_indexes);\r\n        let string_potentials = [];\r\n        for (let i = 0; i < tuning_temp_indexes.length; i++){\r\n            string_potentials.push([]);\r\n            for(let j = 0; j <= h_fret_bound-l_fret_bound; j++) { \r\n                let temp_index = tuning_temp_indexes[i] + l_fret_bound + j;\r\n                if (temp_index >= temp_string.length) {\r\n                    temp_index = temp_index % temp_string.length;\r\n                }\r\n                for(let k = 0; k < chord_notes.length; k++) {                 \r\n                    if (chord_notes[k].accidental === FLAT) {\r\n                        if (temp_string[temp_index + 1] === chord_notes[k].root) {\r\n                            let the_note = new general_note(chord_notes[k].root, chord_notes[k].accidental);\r\n                            let the_index = (temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length;\r\n                            string_potentials[i].push({index:the_index, note:the_note});\r\n                        }\r\n                    } else if (chord_notes[k].accidental === SHARP) {\r\n                        if (temp_string[temp_index - 1] === chord_notes[k].root) {\r\n                            if(i === 0) {\r\n                                console.log(temp_index - 1);\r\n                                console.log(chord_notes[k].root);\r\n                                console.log(chord_notes[k].accidental);\r\n                            }\r\n                            let the_note = new general_note(chord_notes[k].root, chord_notes[k].accidental);\r\n                            let the_index = (temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length;\r\n                            console.log(the_index);\r\n                            string_potentials[i].push({index:the_index, note:the_note});\r\n                        }\r\n                    } else {\r\n                        if(temp_string[temp_index] === chord_notes[k].root) {\r\n                            let the_note = new general_note(chord_notes[k].root, chord_notes[k].accidental);\r\n                            let the_index=(temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length;\r\n                            string_potentials[i].push({index:the_index, note:the_note});\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            string_potentials[i].push(null);\r\n        }\r\n        console.log('*************STRING POTENTIALS');\r\n        console.log(string_potentials);\r\n\r\n        let arr = string_potentials;\r\n        let n = arr.length;\r\n        let indices = Array(n).fill(0);\r\n        let all_the_chords = [];\r\n\r\n        while(1) {\r\n            let new_chord = []\r\n            let lowest_fret = 1000;\r\n            let highest_fret = -1000;\r\n            let val;\r\n            for (let i = 0; i < n; i++) {\r\n                val = arr[i][indices[i]];\r\n                /* 0s and nulls not included in determining how many frets a chord spans */\r\n                if (val != 0 && val !== null && val > highest_fret) {\r\n                    highest_fret = val;\r\n                }\r\n                if (val != 0 && val !== null && val < lowest_fret) {\r\n                    lowest_fret = val;\r\n                } \r\n                new_chord.push(val);\r\n            }\r\n            if(highest_fret-lowest_fret < 5) {\r\n                all_the_chords.push(new_chord);\r\n            }\r\n            let next = n - 1;\r\n            while (next >= 0 && (indices[next] + 1 >= arr[next].length)) {\r\n                next--;\r\n            }\r\n            if (next < 0) {\r\n                break;\r\n            }\r\n            indices[next]++\r\n            for(let i = next + 1; i < n; i++) {\r\n                indices[i] = 0;\r\n            }\r\n            \r\n        }\r\n// https://www.geeksforgeeks.org/combinations-from-n-arrays-picking-one-element-from-each-array/\r\n\r\n        return all_the_chords;\r\n\r\n    }\r\n}\r\n\r\n\r\n","// Copyright 2019 Ross Hall\r\n\r\n/* reducers/index.js holds the initial state \r\nand the logic for each type of state change\r\nthat could occur*/\r\n\r\nimport { \r\n    CHANGE_PROGRESSION,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT, \r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES,\r\n    CHANGE_DIAGRAM_INDEX,\r\n    CHANGE_SELECTED_CHORD\r\n} from \"../constants/actionTypes.js\";\r\nimport { general_chord, generalCopy, general_note } from '../classes/generalChord.js';\r\nimport {chord_finder} from '../classes/specificChord.js';\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from '../constants/music.js';\r\n\r\nlet E_note = new general_note(E, NATURAL);\r\nlet A_note = new general_note(A, NATURAL);\r\nlet D_note = new general_note(D, NATURAL);\r\nlet G_note = new general_note(G, NATURAL);\r\nlet B_note = new general_note(B, NATURAL);\r\n\r\n/* In the future the user will be able to set this tuning  */\r\nlet TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\n\r\n\r\nlet chord1 = new general_chord;\r\nlet chord2 = new general_chord;\r\nlet chord3 = new general_chord;\r\nlet chord4 = new general_chord;\r\nchord2.root = 'B';\r\nchord3.root = 'C';\r\nchord4.root = 'D';\r\n\r\nlet find_chords = new chord_finder();\r\n\r\nlet specific_arr1 = find_chords.getFingerPositions(chord1, TUNING, 3, 1);\r\nlet scale1 = find_chords.find_general_scale(chord1);\r\n\r\nlet specific_arr2 = find_chords.getFingerPositions(chord2, TUNING, 8, 5);\r\nlet scale2 = find_chords.find_general_scale(chord2);\r\n\r\nlet specific_arr3 = find_chords.getFingerPositions(chord3, TUNING, 10, 5);\r\nlet scale3 = find_chords.find_general_scale(chord3);\r\n\r\nlet specific_arr4 = find_chords.getFingerPositions(chord4, TUNING, 12, 7);\r\nlet scale4 = find_chords.find_general_scale(chord4);\r\n\r\nconst initialState = {\r\n    active_index: 0,\r\n    chords: [chord1, chord2, chord3, chord4],\r\n    specific_chords: [ specific_arr1, specific_arr2, specific_arr3, specific_arr4 ],\r\n    selected_indices: [0,0,0,0],\r\n    visible_diagram_indices: [0,0,0,0],\r\n    scales: [scale1, scale2, scale3, scale4],\r\n    colors: ['yellow', 'magenta', 'cyan', 'orange', 'red', 'blue', 'lightgreen'] // index maps to scale degree\r\n};\r\n\r\nfunction theReducer(state = initialState, action) {\r\n    /***********************************************************************************\r\n     * Add Chord\r\n     **********************************************************************************/\r\n    if (action.type === CHANGE_PROGRESSION) {\r\n        if(action.payload === 'DELETE') {\r\n            if (state.chords.length > 1) { \r\n                let new_chords = state.chords.slice();\r\n                let new_specific_chords = state.specific_chords.slice();\r\n                let new_selected_indices = state.selected_indices.slice();\r\n                let new_visible_diagram_indices = state.visible_diagram_indices.slice();\r\n                let new_scales = state.scales.slice();\r\n\r\n                new_chords.splice(state.active_index, 1);\r\n                new_specific_chords.splice(state.active_index, 1);\r\n                new_selected_indices.splice(state.active_index, 1);\r\n                new_visible_diagram_indices.splice(state.active_index, 1);\r\n                new_scales.splice(state.active_index, 1);\r\n                let new_index;\r\n                if (state.active_index === state.chords.length - 1) {\r\n                    new_index = state.active_index - 1;\r\n                } else {\r\n                    new_index = state.active_index;\r\n                }\r\n                return Object.assign({}, state, {\r\n                    active_index: new_index,\r\n                    chords: new_chords,\r\n                    specific_chords: new_specific_chords,\r\n                    selected_indices: new_selected_indices,\r\n                    visible_diagram_indices: new_visible_diagram_indices,\r\n                    scales: new_scales,\r\n                });\r\n            }\r\n        } else if (action.payload === 'BEFORE') {\r\n            let new_chord = new general_chord;\r\n            let new_spec_arr = find_chords.getFingerPositions(new_chord, TUNING, 9, 3);\r\n            let new_scale = find_chords.find_general_scale(new_chord);\r\n\r\n            let new_chords = state.chords.slice();\r\n            let new_specific_chords = state.specific_chords.slice();\r\n            let new_selected_indices = state.selected_indices.slice();\r\n            let new_visible_diagram_indices = state.visible_diagram_indices.slice();\r\n            let new_scales = state.scales.slice();\r\n\r\n            new_chords.splice(state.active_index, 0, new_chord);\r\n            new_specific_chords.splice(state.active_index, 0, new_spec_arr);\r\n            new_selected_indices.splice(state.active_index, 0, 0);\r\n            new_visible_diagram_indices.splice(state.active_index, 0, 0);\r\n            new_scales.splice(state.active_index, 0, new_scale);\r\n\r\n            return Object.assign({}, state, {\r\n                chords: new_chords,\r\n                specific_chords: new_specific_chords,\r\n                selected_indices: new_selected_indices,\r\n                visible_diagram_indices: new_visible_diagram_indices,\r\n                scales: new_scales\r\n            });\r\n        } else { // insert after\r\n            let new_chord = new general_chord;\r\n            let new_spec_arr = find_chords.getFingerPositions(new_chord, TUNING, 9, 3);\r\n            let new_scale = find_chords.find_general_scale(new_chord);\r\n\r\n            let new_chords = state.chords.slice();\r\n            let new_specific_chords = state.specific_chords.slice();\r\n            let new_selected_indices = state.selected_indices.slice();\r\n            let new_visible_diagram_indices = state.visible_diagram_indices.slice();\r\n            let new_scales = state.scales.slice();\r\n\r\n            new_chords.splice(state.active_index + 1, 0, new_chord);\r\n            new_specific_chords.splice(state.active_index + 1, 0, new_spec_arr);\r\n            new_selected_indices.splice(state.active_index + 1, 0, 0);\r\n            new_visible_diagram_indices.splice(state.active_index + 1, 0, 0);\r\n            new_scales.splice(state.active_index + 1, 0, new_scale);\r\n\r\n            return Object.assign({}, state, {\r\n                chords: new_chords,\r\n                specific_chords: new_specific_chords,\r\n                selected_indices: new_selected_indices,\r\n                visible_diagram_indices: new_visible_diagram_indices,\r\n                scales: new_scales\r\n            });\r\n        }\r\n\r\n\r\n    /***********************************************************************************\r\n     * Change Active Index\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ACTIVE_INDEX) {\r\n        return Object.assign({}, state, {\r\n            active_index: action.payload,\r\n        });\r\n    /***********************************************************************************\r\n     * Change Root\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ROOT) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.root = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n        \r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales.slice();\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales\r\n        });\r\n    /***********************************************************************************\r\n     * Change accidental\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ACCIDENTAL) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.accidental = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales.slice();\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales\r\n        });\r\n    /***********************************************************************************\r\n     * Change Mode\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_MODE){\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.mode = action.payload;\r\n        console.log('**********************************');\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n        console.log(the_clone);\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords\r\n        console.log(new_specific_chords);\r\n        console.log(new_spec_arr[state.active_index]);\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales.slice();\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales \r\n        });\r\n    /***********************************************************************************\r\n     * Change Tri Notes\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_TRI_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.tri_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales.slice();\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales \r\n        });\r\n    /***********************************************************************************\r\n     * Change Ext Notes\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_EXT_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.ext_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales.slice();\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales \r\n        });\r\n    /*************************************************************************************\r\n     * Change  Visible Diagram Index\r\n     * **********************************************************************************/\r\n    } else if (action.type === CHANGE_DIAGRAM_INDEX) {\r\n        let visible_diagrams = state.visible_diagram_indices.slice();\r\n        visible_diagrams[action.payload.active_index] = action.payload.diagram_index;\r\n        return Object.assign({}, state, {\r\n            visible_diagram_indices: visible_diagrams,\r\n        });\r\n    } else if (action.type === CHANGE_SELECTED_CHORD) {\r\n        let selected_chords = state.selected_indices.slice();\r\n        selected_chords[action.payload.active_index] = action.payload.visible_index;\r\n        console.log('SELECT');\r\n        console.log(selected_chords);\r\n        return Object.assign({}, state, {\r\n            selected_indices: selected_chords,\r\n        });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default theReducer;","// Copyright 2019 Ross Hall\r\nimport { createStore } from \"redux\";\r\nimport theReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(theReducer);\r\nexport default store;","// Copyright 2019 Ross Hall\r\n/* The card1 component is displayed directly below the top banner\r\nand contains the color mapping of scale degrees\r\n\r\nThe card2 component is displayed directly above the control panel \r\nand contains buttons for setting a chord and chaning the chord \r\nprogression by adding or deleting chords*/\r\n\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeProgression,\r\n    changeSelectedChord\r\n\r\n} from './actions/index.js';\r\n\r\n\r\nconst mapStateToPropsC1 = state => {\r\n    return {\r\n        colors: state.colors,\r\n    }\r\n}\r\nconst mapStateToPropsC2 = state => {\r\n    return {\r\n        active_index: state.active_index,\r\n        visible_index: state.visible_diagram_indices[state.active_index],  \r\n        test: state.visible_diagram_indices\r\n    }\r\n}\r\n\r\nclass connected_card1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                colors\r\n            },\r\n        } = this;\r\n        let color_index = <ul id='color-index'></ul>\r\n\r\n        return (\r\n            <div id=\"card1\" className=\"card\">\r\n                <ul id='color-index'>\r\n                    {colors.map((color, index) => {\r\n                        return <li style={{'background-color':color}}><h6>{index+1}<h6></h6></h6></li>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nclass connected_card2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showMenu: false,\r\n        }\r\n    }\r\n    optionClicker = () => {\r\n        this.setState({showMenu: true});\r\n    }\r\n    optionSelector = (string) => {\r\n        this.setState({\r\n            showMenu: false,\r\n        });\r\n        store.dispatch(changeProgression(string))\r\n    }\r\n    setChord = (active_index, visible_index) => {\r\n        store.dispatch(changeSelectedChord(active_index, visible_index));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                active_index,\r\n                visible_index,\r\n                test\r\n            },\r\n            state: {\r\n                showMenu,\r\n            },\r\n            optionClicker,\r\n            optionSelector,\r\n            setChord,\r\n        } = this;\r\n        let cp_options;\r\n        let cp_button =\r\n            <div id='change-progression' onClick={optionClicker}>\r\n                <h3>Change Progression</h3>\r\n            </div>;\r\n        if (showMenu) {\r\n            cp_options =                 \r\n            <ul id='option-menu'>\r\n                <li onClick={optionSelector.bind(this, \"BEFORE\")}><h6>Insert Before</h6></li>\r\n                <li onClick={optionSelector.bind(this, \"AFTER\")}><h6>Insert After</h6></li>\r\n                <li onClick={optionSelector.bind(this, \"DELETE\")}><h6>Delete</h6></li>\r\n            </ul>;\r\n        }\r\n\r\n        return (\r\n            <div id=\"card2\" className=\"card\">\r\n                {cp_button}\r\n                <div>\r\n                    <h3 onClick={setChord.bind(this, active_index, visible_index)}>Set Chord</h3>\r\n                </div>\r\n                {cp_options}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst Card1 = connect(mapStateToPropsC1)(connected_card1); \r\nconst Card2 = connect(mapStateToPropsC2)(connected_card2);\r\nexport {\r\n    Card1,\r\n    Card2,\r\n}","// Copyright 2019 Ross Hall\r\nimport { \r\n    CHANGE_PROGRESSION,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT,\r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES,\r\n    CHANGE_DIAGRAM_INDEX,\r\n    CHANGE_SELECTED_CHORD\r\n } from \"../constants/actionTypes.js\";\r\n\r\nexport function changeProgression(the_stuff) {\r\n    return { \r\n        type: CHANGE_PROGRESSION, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeActiveIndex(the_stuff) {\r\n    return { \r\n        type: CHANGE_ACTIVE_INDEX, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeRoot(the_stuff) {\r\n    return {\r\n        type: CHANGE_ROOT,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeAccidental(the_stuff) {\r\n    return {\r\n        type: CHANGE_ACCIDENTAL,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeMode(the_stuff) {\r\n    return {\r\n        type: CHANGE_MODE,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeTriNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_TRI_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeExtNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_EXT_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeDiagramIndex(j, i) {\r\n    return {\r\n        type: CHANGE_DIAGRAM_INDEX,\r\n        payload: {\r\n            active_index: j,\r\n            diagram_index: i\r\n        }\r\n    }\r\n} \r\nexport function changeSelectedChord(j, i) {\r\n    return {\r\n        type: CHANGE_SELECTED_CHORD,\r\n        payload: {\r\n            active_index: j,\r\n            visible_index: i\r\n        }\r\n    }\r\n} ","// Copyright 2019 Ross Hall\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\n// FROM:\r\n// https://alligator.io/react/tabs-component/\r\nclass Tab extends Component {\r\n    static propTypes = {\r\n        activeTab: PropTypes.string.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func.isRequired,\r\n    }\r\n    onClick = () => {\r\n        const {label, onClick} = this.props;\r\n        onClick(label);\r\n    }\r\n     \r\n    render() {\r\n        const {\r\n            onClick,\r\n            props: {\r\n                activeTab,\r\n                label,\r\n            },\r\n        } = this;\r\n        let label_arr = label.split(' ');\r\n        \r\n        let className = 'tab-list-item';\r\n\r\n        if (activeTab === label) {\r\n            className += ' tab-list-active';\r\n        }\r\n\r\n        return (\r\n            <li\r\n                className = {className}\r\n                onClick = {onClick}\r\n            ><h6>{label_arr[0]}<br/>{label_arr[1]}</h6></li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tab;\r\n","// Copyright 2019 Ross Hall\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nimport Tab from './Tab';\r\n\r\n// FROM: \r\n// https://alligator.io/react/tabs-component/\r\nclass Tabs extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.instanceOf(Array).isRequired,\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: this.props.children[0].props.label\r\n        };\r\n    }\r\n\r\n    onClickTabItem = (tab) => {\r\n        this.setState({activeTab: tab});\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            onClickTabItem,\r\n            props: {\r\n                children,\r\n            },\r\n            state: {\r\n                activeTab,\r\n            }\r\n        } = this;\r\n\r\n        return (\r\n            <div className = 'tabs'>\r\n                <div className='tab-content'>\r\n                    {children.map((child) => {\r\n                        if (child.props.label !== activeTab) {\r\n                            return undefined;\r\n                        }\r\n                        return child.props.children;\r\n                    })}\r\n                </div>\r\n                <ol className = 'tab-list'>\r\n                    {children.map((child) => {\r\n                        const { label} = child.props;\r\n                        return (\r\n                            <Tab\r\n                                activeTab = {activeTab}\r\n                                key = {label}\r\n                                label = {label}\r\n                                onClick = {onClickTabItem}\r\n                            />\r\n                        );\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Tabs;","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        chords: state.chords,\r\n        active_index: state.active_index,\r\n        visible_diagram_indices: state.visible_diagram_indices,\r\n    }\r\n}\r\n\r\nclass connected_Selector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n    handleScroll() {\r\n        let el = document.getElementById('chordHolder')\r\n        let scrollOffset = el.scrollLeft;\r\n        let itemWidth = el.offsetWidth / 3.0;\r\n        let i = 0;\r\n        while ((i) * itemWidth <= scrollOffset - (itemWidth/2.0)) {\r\n            i++;\r\n        }\r\n        if (i !== this.props.active_index) {\r\n            store.dispatch( changeActiveIndex(i) );\r\n            let list = document.getElementById('svg-list');\r\n            itemWidth = list.offsetWidth;\r\n            list.scrollLeft = this.props.visible_diagram_indices[i] * itemWidth;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                chords,\r\n                active_index,\r\n                visible_diagram_indices\r\n            },\r\n            handleScroll\r\n        } = this;\r\n        return (\r\n            <ul id='chordHolder' onScroll={handleScroll}>\r\n                <li></li>\r\n                {chords.map((child, index) => {\r\n                    if (index === active_index) { \r\n                        return (<li className='selected'><h6>{child.getNameAsString()}</h6></li>);\r\n                    } else {\r\n                        return (<li><h6>{child.getNameAsString()}</h6></li>);\r\n                    }\r\n                })}\r\n                <li></li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\nconst Selector = connect(mapStateToProps)(connected_Selector); \r\nexport default Selector;\r\n","// Copyright 2019 Ross Hall\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeRoot,\r\n    changeAccidental\r\n} from './actions/index.js'\r\n\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        root: state.chords[state.active_index].root,\r\n        accidental: state.chords[state.active_index].accidental\r\n    }\r\n}\r\n/*function mapDispatchToProps(dispatch) {\r\n    return {\r\n        changeRoot: root => dispatch(changeRoot(root))\r\n    },\r\n}*/\r\n\r\nclass connected_RSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n/*            active_index: store.getState().active_index,\r\n            root: store.getState().chords[ store.getState().active_index ].root,*/\r\n            /*accidental: store.getState().chords[ store.getState().active_index ].accidental,*/\r\n            showRMenu: false,\r\n            showAMenu: false,\r\n        }\r\n    }\r\n    rootClicker = () => {\r\n        this.setState({showRMenu: true});\r\n    }\r\n    rootSelector = (letter) => {\r\n        this.setState({\r\n            showRMenu: false,\r\n        });\r\n        store.dispatch(changeRoot(letter))\r\n    }\r\n    accClicker = () => {\r\n        this.setState({showAMenu: true});\r\n    }\r\n    accSelector = (symbol) => {\r\n        this.setState({\r\n            showAMenu: false,\r\n        });\r\n        store.dispatch(changeAccidental(symbol))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                root,\r\n                accidental\r\n            },\r\n            state: {\r\n                showRMenu,\r\n                showAMenu\r\n            },\r\n            rootClicker,\r\n            rootSelector,\r\n            accClicker,\r\n            accSelector\r\n        } = this;\r\n        let r;\r\n        let a;\r\n        if (showRMenu) {\r\n            r = \r\n                <ul id='root-menu'>\r\n                    <li onClick={rootSelector.bind(this, A)}><h6>{A}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, B)}><h6>{B}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, C)}><h6>{C}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, D)}><h6>{D}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, E)}><h6>{E}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, F)}><h6>{F}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, G)}><h6>{G}</h6></li>\r\n                </ul>\r\n        } else {\r\n            r = <div id='the-root' onClick={rootClicker}><h6>{root}</h6></div>\r\n        }\r\n        if (showAMenu) {\r\n            a = \r\n                <ul id='accidental-menu'>\r\n                    <li onClick={accSelector.bind(this, SHARP)}><h6>{SHARP}</h6></li>\r\n                    <li onClick={accSelector.bind(this, NATURAL)}><h6>{NATURAL}</h6></li>\r\n                    <li onClick={accSelector.bind(this, FLAT)}><h6>{FLAT}</h6></li>\r\n                </ul>\r\n        } else {\r\n            a = <div id='the-accidental' onClick={accClicker}><h6>{accidental}</h6></div>\r\n        }\r\n        return(\r\n            <div id='root-container'>\r\n                {r}\r\n                {a}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst RSelect = connect(mapStateToProps)(connected_RSelect); \r\nexport default RSelect;","// Copyright 2019 Ross Hall\r\nimport React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeMode} from './actions/index.js'\r\nimport {IONIAN, \r\n    DORIAN, \r\n    PHRYGIAN, \r\n    LYDIAN, \r\n    MIXOLYDIAN, \r\n    AEOLIAN, \r\n    LOCRIAN} from './constants/music.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        mode: state.chords[state.active_index].mode,\r\n    }\r\n}\r\n\r\nclass connected_MSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showMenu: false,\r\n        }\r\n    }\r\n    modeClicker = () => {\r\n        this.setState({showMenu: true});\r\n    }\r\n    modeSelector = (string) => {\r\n        this.setState({\r\n            showMenu: false,\r\n        });\r\n        store.dispatch(changeMode(string))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                mode\r\n            },\r\n            state: {\r\n                showMenu,\r\n            },\r\n            modeClicker,\r\n            modeSelector,\r\n        } = this;\r\n        \r\n        if (!showMenu) {\r\n            return(    \r\n              <div id='mode-container'>\r\n                <div id='the-mode' onClick={modeClicker}><h6>{mode}</h6></div>\r\n              </div>  \r\n            );\r\n        } else {\r\n            return(\r\n                <div id='mode-container'>\r\n                    <ul id='mode-list'>\r\n                        <li onClick={modeSelector.bind(this, IONIAN)}><h6>{IONIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, DORIAN)}><h6>{DORIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, PHRYGIAN)}><h6>{PHRYGIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LYDIAN)}><h6>{LYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, MIXOLYDIAN)}><h6>{MIXOLYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, AEOLIAN)}><h6>{AEOLIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LOCRIAN)}><h6>{LOCRIAN}</h6></li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nconst MSelect = connect(mapStateToProps)(connected_MSelect); \r\nexport default MSelect;","// Copyright 2019 Ross Hall\r\nimport React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeTriNotes} from './actions/index.js'\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tri_notes: state.chords[state.active_index].tri_notes,\r\n        colors: state.colors,\r\n    }\r\n}\r\nclass connected_TSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    triItemOnClick = (index) => {\r\n        let arr = this.props.tri_notes.slice();\r\n        for (let i= 0; i < arr.length; i++) {\r\n        }\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeTriNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                tri_notes,\r\n                colors\r\n            },\r\n            triItemOnClick\r\n        } = this\r\n        console.log(tri_notes);\r\n        const tri_list_items = tri_notes.map(function(bool, index){\r\n            let styles;\r\n            if (bool) {\r\n                let color_index = index*2;\r\n                styles = {color: colors[color_index], border: \"2px solid \" + colors[color_index]}\r\n            } \r\n            return <li \r\n                style={styles}\r\n                key={index}\r\n                onClick = {triItemOnClick.bind(this, index)}> <h6>{index * 2 + 1}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='tri-list'>\r\n                {tri_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst TSelect = connect(mapStateToProps)(connected_TSelect); \r\nexport default TSelect;","// Copyright 2019 Ross Hall\r\nimport React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeExtNotes} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ext_notes: state.chords[state.active_index].ext_notes,\r\n        colors: state.colors,\r\n    }\r\n}\r\n\r\nclass connected_ESelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    extItemOnClick = (index) => {\r\n        let arr = this.props.ext_notes.slice();\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeExtNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                ext_notes,\r\n                colors\r\n            },\r\n            extItemOnClick\r\n        } = this\r\n\r\n        const ext_list_items = ext_notes.map(function(bool, index){\r\n            let styles;\r\n            if (bool) {\r\n                let color_index = ((index*2+7)%8);\r\n                if (color_index === 7){\r\n                    color_index--;\r\n                }\r\n\r\n                styles = {color: colors[color_index], border: \"2px solid \" + colors[color_index]}\r\n            } \r\n            return <li \r\n                \r\n                style={styles}\r\n                key={index}\r\n                onClick = {extItemOnClick.bind(this, index)}> <h6>{index * 2 + 7}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='ext-list'>\r\n                {ext_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst ESelect = connect(mapStateToProps)(connected_ESelect); \r\nexport default ESelect;\r\n","// Copyright 2019 Ross Hall\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport RSelect from './rootSelector.js';\r\nimport MSelect from './modeSelector.js';\r\nimport TSelect from './triSelector.js';\r\nimport ESelect from './extSelector.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nclass DCPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div class='panel-wrap'>\r\n                <div id='theroot'>\r\n                    <h3>Root:</h3>\r\n                    <RSelect />\r\n                </div>\r\n                <div id='mode'>\r\n                    <h3>Mode:</h3>\r\n                    <MSelect />\r\n                </div>\r\n                <div id='note-selection'>\r\n                    <div id='triad'>\r\n                        <h3><span>Triad:</span></h3>\r\n                        <TSelect />\r\n                    </div>\r\n                    <div id='extensions'>\r\n                        <h3><span>Ext:</span></h3>\r\n                        <ESelect />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default DCPanel;\r\n","// Copyright 2019 Ross Hall\r\n/* The ChordViz component takes a list on specific chord instances and \r\ntranslates them into a list of chord diagram SVG's */\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {changeDiagramIndex} from './actions/index.js';\r\nimport ChordTab from './chordTab.js';\r\nimport {general_chord, general_note} from './classes/generalChord.js';\r\nimport {chord_finder} from './classes/specificChord.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        active_index: state.active_index,\r\n        specific_chords: state.specific_chords[state.active_index],\r\n        visible_diagram_indices: state.visible_diagram_indices,\r\n        selected_chord_index: state.selected_indices[state.active_index],\r\n        scale: state.scales[state.active_index],\r\n        colors: state.colors\r\n    }\r\n}\r\nclass connected_ChordViz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n    handleScroll() {\r\n        let el = document.getElementById('svg-list')\r\n        let scrollOffset = el.scrollLeft;\r\n        let itemWidth = el.offsetWidth;\r\n        let i = 0;\r\n        while ((i) * itemWidth <= scrollOffset - (itemWidth / 2)) {\r\n            i++;\r\n        }\r\n        if (i !== this.props.visible_diagram_indices[this.props.active_index]) {\r\n            store.dispatch( changeDiagramIndex(this.props.active_index, i) );\r\n        }\r\n    }\r\n    makeSVG = (notes, scale, colors) => {\r\n        let string_number = notes.length;\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 5;\r\n        let fret_span = 100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (fret_span - 7) + '%';\r\n        let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n        \r\n        let circle_radius = (string_span / 2.5);\r\n        let radius_str = circle_radius +'%';\r\n        \r\n        let hi_fret = -100;\r\n        let lo_fret = 100;\r\n        for (let i = 0; i < notes.length; i++) {\r\n            if (notes[i] !== null && notes[i].index !== 0 && notes[i].index < lo_fret) {\r\n                lo_fret = notes[i].index;\r\n            }\r\n            if (notes[i] !== null && notes[i].index !== 0 && notes[i].index > hi_fret) {\r\n                hi_fret = notes[i].index;\r\n            }\r\n        }\r\n        let chord_span;\r\n        if (hi_fret === 100) {\r\n            chord_span = 0;\r\n        } else {\r\n            chord_span = hi_fret - lo_fret + 1;\r\n        }\r\n        let chord_padding = Math.floor((fret_number - chord_span) / 2);\r\n        \r\n        let chord_shift = lo_fret - chord_padding;\r\n        let diagram_base;\r\n        if(chord_shift < 0) {\r\n            chord_shift = 1;\r\n            diagram_base = 1\r\n        } else {\r\n            diagram_base = chord_shift;\r\n        }\r\n\r\n        let shifted_notes = []\r\n        for (let i = 0; i < notes.length; i++) {\r\n            if (notes[i] === null){\r\n                shifted_notes.push(null);\r\n            } else if (notes[i].index === 0) {\r\n                shifted_notes.push({index:1, note:notes[i].note});\r\n            } else {\r\n                shifted_notes.push({index:notes[i].index - chord_shift + 2, note:notes[i].note});\r\n            }\r\n        }\r\n        return(\r\n                <svg class='the-svg' style={{margin: 'auto', width:'50%', height:'50%'}}>\r\n                    {y_coords.map((y_coord, index)=> {\r\n                        if (index === 0) {\r\n                            return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                        } else {\r\n                            return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                        }\r\n                    })}\r\n                    <text x='2%' y={(fret_span-1) + '%'} fill=\"white\">0</text>\r\n                    <text x='2%' y={(fret_span+5) + '%'} fill=\"white\">{diagram_base}</text>\r\n                    {x_coords.map(x_coord => {\r\n                        return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                    })}\r\n                    {shifted_notes.map((note, index) => {\r\n                        if (note === null) {\r\n                            return\r\n                        } else {\r\n                            let x_center = string_span*(index+1) +'%';\r\n                            let y_center = fret_span*note.index - circle_radius + '%';\r\n                            let color;\r\n                            for(let i = 0; i<colors.length; i++) {\r\n                                if (note.note.root === scale[i].root &&\r\n                                    note.note.accidental === scale[i].accidental) {\r\n                                        color=colors[i];\r\n                                    }\r\n                                }  \r\n                            return <circle cx= {x_center} cy={y_center} r={radius_str} fill={color}></circle>\r\n                        }\r\n                    })}\r\n                </svg>\r\n        );\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                specific_chords,\r\n                selected_chord_index,\r\n                scale,\r\n                colors\r\n            },\r\n            handleScroll,\r\n            makeSVG\r\n        } = this;\r\n        return(\r\n            <ul id='svg-list' onScroll={handleScroll}>\r\n                {specific_chords.map((arr, index) => {\r\n                    if (index === selected_chord_index) {\r\n                        return <li class='selected'><h6 id='meh'>Selected</h6> {makeSVG(arr, scale, colors)}</li>\r\n                    } else {\r\n                        return <li>{makeSVG(arr, scale, colors)}</li>\r\n                    }\r\n                })}    \r\n            </ul>\r\n        );\r\n    }\r\n}\r\nconst ChordViz = connect(mapStateToProps)(connected_ChordViz); \r\nexport default ChordViz;","\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\nimport {note_instance, chord_instance} from './classes/specificChord.js';\r\n\r\nclass ChordTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n        let makeSVG = (notes) => {\r\n            let string_number = notes.length;\r\n            let string_span = 100/(string_number + 1);\r\n\r\n            let x_coords = [];\r\n            for (let i = 0; i < string_number; i++) {\r\n                x_coords.push(((i+1) * string_span) +'%');\r\n            }\r\n            let fret_number = 5;\r\n            let fret_span = 100/(fret_number + 1);\r\n            let y_coords = [];\r\n            for (let i = 0; i < fret_number + 1; i++) {\r\n                y_coords.push(((i+1) * fret_span) + '%');\r\n            }\r\n            let fret_x1 = (fret_span - 7) + '%';\r\n            let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n            \r\n            let circle_radius = (string_span / 2.5);\r\n            let radius_str = circle_radius +'%';\r\n            \r\n            let hi_fret = -100;\r\n            let lo_fret = 100;\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] < lo_fret) {\r\n                    lo_fret = notes[i];\r\n                }\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] > hi_fret) {\r\n                    hi_fret = notes[i];\r\n                }\r\n            }\r\n            let chord_span;\r\n            if (hi_fret === 100) {\r\n                chord_span = 0;\r\n            } else {\r\n                chord_span = hi_fret - lo_fret + 1;\r\n            }\r\n            let chord_padding = Math.floor((fret_number - chord_span) / 2);\r\n            let chord_shift = lo_fret - chord_padding;\r\n            let shifted_notes = []\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] === null){\r\n                    shifted_notes.push(null);\r\n                } else if (notes[i] === 0) {\r\n                    shifted_notes.push(1);\r\n                } else {\r\n                    shifted_notes.push(notes[i] - chord_shift + 2);\r\n                }\r\n            }\r\n            return(\r\n                <svg style={{width:'100%', height:'100%'}}>\r\n                    {y_coords.map((y_coord, index)=> {\r\n                        if (index === 0) {\r\n                            return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                        } else {\r\n                            return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                        }\r\n                    })}\r\n                    <text x='2%' y={(fret_span-1) + '%'} fill=\"white\">0</text>\r\n                    <text x='2%' y={(fret_span+5) + '%'} fill=\"white\">{chord_shift}</text>\r\n                    {x_coords.map(x_coord => {\r\n                        return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                    })}\r\n\r\n                    {shifted_notes.map((note, index) => {\r\n                        if (note === null) {\r\n                            return\r\n                        } else {\r\n                            let x_center = string_span*(index+1) +'%';\r\n                            let y_center = fret_span*note - circle_radius + '%';\r\n                            return <circle cx= {x_center} cy={y_center} r={radius_str} fill='yellow'></circle>\r\n                        }\r\n                    })}\r\n                </svg>\r\n            );\r\n        }\r\n        let arr = [9, 11, 11, 10, 9, 9];\r\n        return(\r\n                makeSVG(arr)\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChordTab;","// Copyright 2019 Ross Hall\r\n/* The ChordBackdrop component serves as a placeholder\r\nfor the chordViz component. */\r\n\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\nimport ChordViz from './chordViz.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        specific_chords_length: state.specific_chords[state.active_index].length,\r\n        visible_diagram_index: state.visible_diagram_indices[state.active_index],\r\n        selected_chord_index: state.selected_indices[state.active_index],\r\n    }\r\n}\r\n\r\nclass connected_ChordBackdrop extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                specific_chords_length,\r\n                visible_diagram_index\r\n            }\r\n        } = this;\r\n        let left_arrow = null;\r\n        let right_arrow = null;\r\n        if (visible_diagram_index !== 0) {\r\n            left_arrow = <div id='l-cDiagram-arrow'></div>\r\n        }\r\n        if (visible_diagram_index !== specific_chords_length - 1) {\r\n            right_arrow = <div id='r-cDiagram-arrow'></div>\r\n        }\r\n        return (\r\n            <div id=\"chordBackdrop\">\r\n                <ChordViz />\r\n                <h3 id='index-indicator'>{visible_diagram_index + 1} / {specific_chords_length}</h3>\r\n                {left_arrow}\r\n                {right_arrow}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst ChordBackdrop = connect(mapStateToProps)(connected_ChordBackdrop); \r\nexport default ChordBackdrop;\r\n","// Copyright 2019 Ross Hall\r\n/*\r\nBoardViz translates a specific chord instance into a full frettboard chord visualization\r\n*/\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {changeDiagramIndex} from './actions/index.js';\r\nimport ChordTab from './chordTab.js';\r\nimport {general_chord, general_note} from './classes/generalChord.js';\r\nimport {chord_finder} from './classes/specificChord.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    console.log('%%%%%%%%%%%%%%%%%%%%%%%%');\r\n    console.log(state.specific_chords[state.active_index]);\r\n    console.log(state.selected_indices[state.active_index]);\r\n    console.log('%%%%%%%%%%%%%%%%%%%%%%%%');\r\n    return {\r\n        the_chord: state.specific_chords[state.active_index][state.selected_indices[state.active_index]],\r\n        scale: state.scales[state.active_index],\r\n        colors: state.colors\r\n    }\r\n}\r\n\r\nclass connected_BoardViz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    makeSVG = (notes, scale, colors) => {\r\n        let string_number = 6\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 16;\r\n        let fret_span = 100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (string_span - 7) + '%';\r\n        let fret_x2 = ((string_span * (string_number)) + 7) + '%';\r\n        \r\n        let circle_radius = (string_span / 5.5);\r\n        let radius_str = circle_radius +'%';\r\n        \r\n        return(\r\n                <svg class='the-svg' style={{margin: 'auto', width:'30%', height:'70%'}}>\r\n                    {y_coords.map((y_coord, index)=> {\r\n                        if (index === 0) {\r\n                            return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                        } else {\r\n                            return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                        }\r\n                    })}\r\n                    {x_coords.map(x_coord => {\r\n                        return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                    })}\r\n                    {notes.map((note, index) => {\r\n                        if (note === null) {\r\n                            return\r\n                        } else {\r\n                            let x_center = string_span*(index+1) +'%';\r\n                            let y_center = fret_span*note.index - circle_radius + '%';\r\n                            let color;\r\n                            for(let i = 0; i<colors.length; i++) {\r\n                                if (note.note.root === scale[i].root &&\r\n                                    note.note.accidental === scale[i].accidental) {\r\n                                        color=colors[i];\r\n                                    }\r\n                                }  \r\n                            return <circle cx= {x_center} cy={y_center} r={radius_str} fill={color}></circle>\r\n                        }\r\n                    })}\r\n                </svg>\r\n        );\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                the_chord,\r\n                scale,\r\n                colors\r\n            },\r\n            makeSVG\r\n        } = this;\r\n        console.log(the_chord);\r\n        console.log(scale);\r\n        console.log(colors);\r\n        return(\r\n            makeSVG(the_chord, scale, colors)\r\n        );\r\n    }\r\n}\r\nconst BoardViz = connect(mapStateToProps)(connected_BoardViz); \r\nexport default BoardViz;","// Copyright 2019 Ross Hall\r\n/* the boardBackdrop component serves only as a placeholder \r\nto attach the boardViz component*/\r\n\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\nimport ChordViz from './chordViz.js';\r\nimport BoardViz from './boardViz.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        specific_chords_length: state.specific_chords[state.active_index].length,\r\n        visible_diagram_index: state.visible_diagram_indices[state.active_index],\r\n        selected_chord_index: state.selected_indices[state.active_index],\r\n    }\r\n}\r\n\r\nclass connected_BoardBackdrop extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                specific_chords_length,\r\n                visible_diagram_index\r\n            }\r\n        } = this;\r\n        return (\r\n            <div id=\"bhordBackdrop\">\r\n                <BoardViz />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst BoardBackdrop = connect(mapStateToProps)(connected_BoardBackdrop); \r\nexport default BoardBackdrop;\r\n\r\n","// Copyright 2019 Ross Hall\n/*App is the the main component for Chordage and is attached to the root div\nin index.html*/\n\nimport React, { Component } from 'react';\nimport Select from 'react-select';\nimport Header from './Header.js';\nimport Cards, {Card1, Card2, Card3} from './Cards.js';\nimport Tabs from './Tabs.js';\nimport Selector from './Selector.js';\nimport DCPanel from './defineChordPanel.js';\nimport ChordViz from './chordViz.js';\nimport ChordBackdrop from './chordBackdrop.js';\nimport BoardBackdrop from './boardBackdrop.js';\nimport './App.css';\n\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nlet letter_options = letters.map(opt => ({label: opt, value: opt}));\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            view_progression: false,\n        }\n    }\n    viewClicker = () => {\n        this.setState({view_progression: !this.state.view_progression});\n    }\n    triRotate() {\n        let el = document.getElementById('slide')\n        let scroll_percentage = el.scrollTop / (el.scrollHeight-el.clientHeight);\n        let rotation = 540 * scroll_percentage;\n        let tri = document.getElementById('triangle');\n        tri.style.transform = 'rotate('+rotation+'deg)';         \n    }\n    render() {\n        function scrollTo() {\n            let duration = 400;\n            let el = document.getElementById('slide');\n            let height = el.scrollHeight-el.clientHeight;\n\n            let scroll_percentage = el.scrollTop / (el.scrollHeight-el.clientHeight);\n            let to;\n            if(scroll_percentage < .5) {\n                to = height;\n            } else {\n                to = 0\n            }\n            var difference = to - el.scrollTop;\n            var perTick = difference / duration * 10;\n            let scrolling = setInterval(function() {\n                el.scrollTop = el.scrollTop + perTick;\n                if (el.scrollTop === to) {\n                    clearInterval(scrolling);\n                }\n            }, 10);\n        }\n        const {\n            state: {\n                view_progression\n            },\n            viewClicker,\n            triRotate,\n        } = this;\n\n        let backdrop;\n        if (view_progression) {\n            backdrop = <BoardBackdrop />\n        } else {\n            backdrop = <ChordBackdrop />\n        }\n        return (\n            <div id='wrapper'>\n                <div id='tester'>\n                <header className=\"App-header\">\n    <h1>Chordage</h1>\n    <div id='view-progression' onClick = {viewClicker}>\n        <h5 id='view-text'>View Progression</h5>\n    </div>\n</header>\n<div id='topCardHolder'>\n    <Card1 />\n</div>\n<div id=\"slide\" onScroll={triRotate}>\n    {backdrop}\n    <div id='spacer'></div>\n\n\n    <div id='description-wrap'>\n        <div id='tri-space'>\n            <Card2 />\n        </div>\n\n        <div id='description'>\n\n            <Selector />\n\n            <Tabs>\n                <div id='define' label='Define Chord'>\n                    <DCPanel />\n                </div>\n\n                <div id='search' label='Search Space'>\n                    <div style={{marginBottom: '10%', marginTop: '10%', textAlign: 'center'}}>\n                        <label>Low Fret: </label>\n                        <input></input>\n                    </div>\n                    <div>\n                        <label>High Fret: </label>\n                        <input></input>\n                    </div>\n                    <button>Submit</button>\n                </div> \n            </Tabs>\n            <div id='triHolder'>\n                <div id='tri-box'>\n                    <div id='triangle' onClick={scrollTo}></div>\n                </div>\n            </div>\n\n        </div>\n\n\n        </div>\n\n    </div>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                    <h1>SUBLIMINAL MESSAGING</h1>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n/*\n<div id='set' label='Unknown Button' style={{marginTop: '10%', alignContent: 'center'}}>\n<label>Set Note: </label>\n<input></input>\n<button>Submit</button>\n</div>\n*/\n\n/*\n<div id='botCardHolder'>\n<Card2 />\n</div>\n*/\n/*\n<div id='triHolder'>\n<div id='triangle' onClick={scrollTo}></div>\n</div>\n*/\n/*\n<div id=\"Wrapper\">\n<header className=\"App-header\">\n    <h1>Chordage</h1>\n    <div id='view-progression' onClick = {viewClicker}>\n        <h5 id='view-text'>View Progression</h5>\n    </div>\n</header>\n<div id='topCardHolder'>\n    <Card1 />\n</div>\n<div id=\"slide\" onScroll={triRotate}>\n    {backdrop}\n    <div id='spacer'></div>\n    <div id='description-wrap'>\n        <div id='tri-space'>\n            <Card2 />\n        </div>\n        <div id='description'>\n\n            <Selector />\n            <Tabs>\n                <div id='define' label='Define Chord'>\n                    <DCPanel />\n                </div>\n\n                <div id='search' label='Search Space'>\n                    <div style={{marginBottom: '10%', marginTop: '10%', textAlign: 'center'}}>\n                        <label>Low Fret: </label>\n                        <input></input>\n                    </div>\n                    <div>\n                        <label>High Fret: </label>\n                        <input></input>\n                    </div>\n                    <button>Submit</button>\n                </div> \n            </Tabs>\n            <div id='triHolder'>\n              <div id='tri-box'>\n                <div id='triangle' onClick={scrollTo}></div>\n              </div>\n            </div>\n        </div>\n    </div>\n</div>\n</div>*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/index.js';\nimport { Provider } from 'react-redux';\n/*import ADD_CHORD from \"./actionTypes/index\";*/\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App /> \n    </Provider>,\n    document.getElementById('root')\n    \n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}