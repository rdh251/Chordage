{"version":3,"sources":["Header.js","Tab.js","Cards.js","Tabs.js","constants/actionTypes.js","constants/music.js","classes/generalChord.js","classes/specificChord.js","reducers/index.js","store/index.js","Selector.js","actions/index.js","rootSelector.js","modeSelector.js","triSelector.js","extSelector.js","defineChordPanel.js","chordViz.js","chordTab.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Tab","onClick","_this$props","_this","props","label","this","_this$props2","activeTab","label_arr","split","Tabs","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClickTabItem","tab","setState","state","children","map","child","src_Tab","key","ADD_CHORD","CHANGE_ACTIVE_INDEX","CHANGE_ROOT","CHANGE_ACCIDENTAL","CHANGE_MODE","CHANGE_TRI_NOTES","CHANGE_EXT_NOTES","A","B","D","E","G","SHARP","NATURAL","FLAT","IONIAN","general_note","the_root","the_accidental","root","accidental","general_chord","mode","tri_notes","ext_notes","createClass","value","string_name","k","i","generalCopy","clone","old","temp_string","E_note","chord_finder","findChordNotes","the_scale","find_general_scale","notes_in_chord","length","Math","floor","push","console","log","getFingerPositions","tuning","h_fret_bound","l_fret_bound","chord_notes","tuning_temp_indexes","start_fret","indexOf","string_potentials","j","temp_index","arr","n","indices","Array","fill","all_the_chords","new_chord","lowest_fret","highest_fret","val","next","active_strings","low_fret_bound","high_fret_bound","required_notes","general_notes","stepper","step_start","build_flat_scale","index","top_7","step_finder","build_sharp_scale","concat","flat_scale","sharp_scale","flat_fail","flat_count","previous_root","sharp_fail","sharp_count","TUNING","chord1","chord2","chord3","chord4","find_chords","specific_arr1","specific_arr2","specific_arr3","initialState","active_index","chords","specific_chords","theReducer","arguments","undefined","action","type","assign","payload","copy_me","the_clone","new_arr","slice","new_specific_chords","new_spec_arr","specififc_chords","store","createStore","connected_Selector","handleScroll","bind","assertThisInitialized","el","document","getElementById","scrollOffset","scrollLeft","itemWidth","offsetWidth","dispatch","id","onScroll","getNameAsString","Selector","connect","connected_RSelect","rootClicker","showRMenu","rootSelector","letter","accClicker","showAMenu","accSelector","symbol","r","_this$state","RSelect","connected_MSelect","modeClicker","showMenu","modeSelector","string","MSelect","connected_TSelect","triItemOnClick","tri_list_items","bool","class_list","TSelect","connected_ESelect","extItemOnClick","ext_list_items","ESelect","DCPanel","class","src_rootSelector","src_modeSelector","triSelector","extSelector","connected_ChordViz","notes","string_number","string_span","x_coords","y_coords","fret_number","chord_span","fret_x2","circle_radius","radius_str","hi_fret","lo_fret","diagram_base","chord_shift","shifted_notes","style","margin","width","height","y_coord","x1","y1","x2","y2","stroke","x","y","x_coord","note","x_center","y_center","cx","cy","makeSVG","ChordViz","App","opt","window","innerHeight","src_Header","chordViz","src_Selector","src_Tabs","defineChordPanel","marginTop","alignContent","marginBottom","textAlign","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b8579ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <h1>Chordage</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\n// FROM:\r\n// https://alligator.io/react/tabs-component/\r\nclass Tab extends Component {\r\n    static propTypes = {\r\n        activeTab: PropTypes.string.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func.isRequired,\r\n    }\r\n    onClick = () => {\r\n        const {label, onClick} = this.props;\r\n        onClick(label);\r\n    }\r\n     \r\n    render() {\r\n        const {\r\n            onClick,\r\n            props: {\r\n                activeTab,\r\n                label,\r\n            },\r\n        } = this;\r\n        let label_arr = label.split(' ');\r\n        \r\n        let className = 'tab-list-item';\r\n\r\n        if (activeTab === label) {\r\n            className += ' tab-list-active';\r\n        }\r\n\r\n        return (\r\n            <li\r\n                className = {className}\r\n                onClick = {onClick}\r\n            ><h6>{label_arr[0]}<br/>{label_arr[1]}</h6></li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tab;\r\n","import React, { Component } from 'react';\r\n\r\nclass Card1 extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"card1\" className=\"card\"></div>\r\n        );\r\n    }\r\n}\r\nclass Card2 extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"card2\" className=\"card\"></div>\r\n        );\r\n    }\r\n}\r\nclass Card3 extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"card3\" className=\"card\"></div>\r\n        );\r\n    }\r\n}\r\nexport {\r\n    Card1,\r\n    Card2,\r\n    Card3\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nimport Tab from './Tab';\r\n\r\n// FROM: \r\n// https://alligator.io/react/tabs-component/\r\nclass Tabs extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.instanceOf(Array).isRequired,\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: this.props.children[0].props.label\r\n        };\r\n    }\r\n\r\n    onClickTabItem = (tab) => {\r\n        this.setState({activeTab: tab});\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            onClickTabItem,\r\n            props: {\r\n                children,\r\n            },\r\n            state: {\r\n                activeTab,\r\n            }\r\n        } = this;\r\n\r\n        return (\r\n            <div className = 'tabs'>\r\n                <div className='tab-content'>\r\n                    {children.map((child) => {\r\n                        if (child.props.label !== activeTab) {\r\n                            return undefined;\r\n                        }\r\n                        return child.props.children;\r\n                    })}\r\n                </div>\r\n                <ol className = 'tab-list'>\r\n                    {children.map((child) => {\r\n                        const { label} = child.props;\r\n                        return (\r\n                            <Tab\r\n                                activeTab = {activeTab}\r\n                                key = {label}\r\n                                label = {label}\r\n                                onClick = {onClickTabItem}\r\n                            />\r\n                        );\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Tabs;","export const ADD_CHORD = 'ADD_CHORD';\r\nexport const CHANGE_ACTIVE_INDEX = 'CHANGE_ACTIVE_INDEX';\r\nexport const CHANGE_ROOT = 'CHANGE_ROOT';\r\nexport const CHANGE_ACCIDENTAL = 'CHANGE_ACCIDENTAL';\r\nexport const CHANGE_MODE = 'CHANGE_MODE';\r\nexport const CHANGE_TRI_NOTES = 'CHANGE_TRI_NOTES';\r\nexport const CHANGE_EXT_NOTES = 'CHANGE_EXT_NOTES';\r\n","/* Notes ******************************/\r\nexport const A = 'A';\r\nexport const B = 'B';\r\nexport const C = 'C';\r\nexport const D = 'D';\r\nexport const E = 'E';\r\nexport const F = 'F';\r\nexport const G = 'G';\r\n\r\n/* Accidentals *************************/\r\nexport const SHARP = '\\u266F';\r\nexport const NATURAL = '\\u266E';\r\nexport const FLAT = '\\u266D';\r\n\r\n/* Modes *******************************/\r\nexport const IONIAN = 'Ionian';\r\nexport const DORIAN = 'Dorian';\r\nexport const PHRYGIAN = 'Phrygian';\r\nexport const LYDIAN = 'Lydian';\r\nexport const MIXOLYDIAN = 'Mixolydian';\r\nexport const AEOLIAN = 'Aeolian';\r\nexport const LOCRIAN = 'Locrian';","import {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\n\r\nexport class general_note {\r\n    constructor(the_root, the_accidental) {\r\n        this.root = the_root;\r\n        this.accidental = the_accidental;\r\n    }\r\n}\r\n\r\nexport class general_chord {\r\n    constructor() {\r\n        this.root = A;\r\n        this.accidental = NATURAL \r\n        this.mode = IONIAN;\r\n        this.tri_notes = [true, true, true];\r\n        this.ext_notes = [false, false, false, false];\r\n    }\r\n    getNameAsString() {\r\n        let string_name = this.root\r\n        if (this.accidental !== NATURAL) {\r\n            string_name += this.accidental;\r\n        }\r\n        if (this.mode === IONIAN ||\r\n            this.mode === LYDIAN) {\r\n                string_name += 'maj';\r\n        } else if (this.mode === MIXOLYDIAN) {\r\n            string_name += 'dom';\r\n        } else if (this.mode === LOCRIAN) {\r\n            string_name += 'dim';\r\n        }\r\n        else {\r\n            string_name += 'min'\r\n        }\r\n        let k = 0;\r\n        for (let i = 7; i <= 13; i += 2) {\r\n            if (this.ext_notes[k]) {\r\n                string_name = string_name + ' ' + i;\r\n            }\r\n            k++;\r\n        }\r\n        return string_name;\r\n    }\r\n}\r\nexport function generalCopy(clone, old) {\r\n    clone.root = old.root;\r\n    clone.accidental = old.accidental;\r\n    clone.mode = old.mode;\r\n    clone.tri_notes = old.tri_notes;\r\n    clone.ext_notes = old.ext_notes;\r\n}","import {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\nimport {\r\n    general_chord,\r\n    general_note\r\n} from './generalChord.js';\r\n\r\nexport class note_instance {\r\n    constructor(fret_number, string_number) {\r\n        this.fret = fret_number;\r\n        this.string = string_number;\r\n    }\r\n}\r\nexport class chord_instance {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E];\r\n\r\n    }\r\n}\r\nlet temp_string = [E, F, '*', G, '*', A, '*', B, C, '*', D, '*' ];\r\nlet E_note = new general_note(E, NATURAL)\r\nlet A_note = new general_note(A, NATURAL)\r\nlet D_note = new general_note(D, NATURAL)\r\nlet G_note = new general_note(G, NATURAL)\r\nlet B_note = new general_note(B, NATURAL)\r\nlet TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\nexport class chord_finder {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E]; \r\n        this.active_strings = [true, false, true, true, true, false];\r\n        this.low_fret_bound = 3;\r\n        this.high_fret_bound = 7;\r\n        this.required_notes= [];\r\n        this.general_notes=[];\r\n    }\r\n    find_general_scale(general_chord){\r\n        let general_notes = [new general_note(general_chord.root, general_chord.accidental)];\r\n        let stepper = [2, 2, 1, 2, 2, 2, 1]; // whole tone or halftone step orderings\r\n        let mode = general_chord.mode;\r\n        \r\n        let step_start = 0\r\n        if (mode === DORIAN) {\r\n            step_start += 1;\r\n        } else if (mode === PHRYGIAN) {\r\n             step_start += 2;\r\n        } else if (mode === LYDIAN) {\r\n            step_start += 3;    \r\n        } else if (mode === MIXOLYDIAN) {\r\n            step_start += 4;    \r\n        } else if (mode === AEOLIAN) {\r\n            step_start += 5;    \r\n        } else if (mode === LOCRIAN) {\r\n            step_start += 6;    \r\n        }\r\n        let build_flat_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                if (temp_string[index] === '*') {\r\n                    if(index + 1 === temp_string.length) {\r\n                        top_7.push(new general_note(temp_string[0], FLAT));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index + 1], FLAT));\r\n\r\n                    }\r\n                } else {\r\n\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n            }\r\n            return top_7; \r\n        }\r\n        let build_sharp_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                if (temp_string[index] == '*') {\r\n                    if(index - 1 < 0) {\r\n                        top_7.push(new general_note(temp_string[12], SHARP));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index-1], SHARP));\r\n                    }\r\n                } else {\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n            }\r\n            return top_7; \r\n        }\r\n        let start_fret = temp_string.indexOf(general_chord.root);\r\n        if (general_chord.accidental === FLAT) {\r\n            start_fret--;\r\n            if (start_fret < 0) {\r\n                start_fret = temp_string.length - 1;\r\n            }\r\n            general_notes = general_notes.concat(build_flat_scale(start_fret));\r\n            return(general_notes);\r\n\r\n        } else if (general_chord.accidental === SHARP) {\r\n            start_fret++;\r\n            if (start_fret >= temp_string.length){\r\n                start_fret = 0;\r\n                general_notes = general_notes.concat(build_sharp_scale(start_fret));\r\n                return(general_notes);\r\n            }\r\n        } else {\r\n            let flat_scale = general_notes.concat(build_flat_scale(start_fret));\r\n            let sharp_scale = general_notes.concat(build_sharp_scale(start_fret));\r\n            let flat_fail = false;\r\n            let flat_count = 0;\r\n            let previous_root = null;\r\n            for (let i = 0; i < flat_scale.length; i++) {\r\n                if (previous_root === flat_scale[i].root) {\r\n                    flat_fail = true;\r\n                }\r\n                if (flat_scale[i].accidental === FLAT) {\r\n                    flat_count++;\r\n                }\r\n                previous_root = flat_scale[i].root;\r\n            }\r\n            let sharp_fail = false;\r\n            let sharp_count = 0;\r\n            previous_root=null;\r\n            for (let i = 0; i < sharp_scale.length; i++) {\r\n                if (previous_root === sharp_scale[i].root){\r\n                    sharp_fail = true;\r\n                    //break;\r\n                }\r\n                if (sharp_scale[i].accidental === SHARP) {\r\n                    sharp_count++;\r\n                }\r\n                previous_root = sharp_scale[i].root;\r\n            }\r\n            if (sharp_fail) {\r\n                return flat_scale;\r\n            } else if (flat_fail) {\r\n                return sharp_scale;\r\n            } else {\r\n                if (sharp_count < flat_count) {\r\n                    return sharp_scale;\r\n                } else {\r\n                    return flat_scale;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    findChordNotes = (general_chord) => {\r\n        let the_scale = this.find_general_scale(general_chord);\r\n        let notes_in_chord = []\r\n        for(let i = 0; i < the_scale.length; i++) {\r\n            if(i === 0 || i === 2 || i === 4) {\r\n                if(general_chord.tri_notes[Math.floor(i/2)]){\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            } else {\r\n                if (general_chord.ext_notes[i%6]) {\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            }\r\n        }\r\n        console.log(general_chord.tri_notes);\r\n        console.log('* chord notes');\r\n        console.log(notes_in_chord);\r\n        return notes_in_chord;\r\n    }\r\n    getFingerPositions = (general_chord, tuning, h_fret_bound, l_fret_bound) => {\r\n        let chord_notes = this.findChordNotes(general_chord);\r\n        let tuning_temp_indexes = [];\r\n        for (let i = 0; i < tuning.length; i++) {\r\n            let start_fret = temp_string.indexOf(tuning[i].root);\r\n            if (tuning[i].accidental === FLAT) {\r\n                start_fret--;\r\n                if (start_fret < 0) {\r\n                    start_fret = temp_string.length - 1;\r\n                }\r\n                \r\n            } else if (general_chord.accidental === SHARP) {\r\n                start_fret++;\r\n                if (start_fret >= temp_string.length){\r\n                    start_fret = 0;\r\n                }\r\n            }\r\n            tuning_temp_indexes.push(start_fret);\r\n        }\r\n\r\n        console.log(tuning_temp_indexes);\r\n        console.log('* the tuning ^ ***************************');\r\n        let string_potentials = [];\r\n        for (let i = 0; i < tuning_temp_indexes.length; i++){\r\n            string_potentials.push([]);\r\n            //console.log(i + '----------------------------');\r\n            for(let j = 0; j < h_fret_bound-l_fret_bound - 1; j++) { // Not sure why - 1 is needed here to \r\n                let temp_index = tuning_temp_indexes[i] + l_fret_bound + j; // the correct upper bound\r\n                if (temp_index >= temp_string.length) {\r\n                    temp_index = temp_index % temp_string.length;\r\n                }\r\n                //console.log(temp_index);\r\n                for(let k = 0; k < chord_notes.length; k++) {                 \r\n                    if (chord_notes[k].accidental === FLAT) {\r\n                        if (temp_string[temp_index + 1] === chord_notes[k].root) {\r\n                            string_potentials[i].push((temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length);\r\n                        }\r\n                    } else if (chord_notes[k].accidental === SHARP) {\r\n                        if (temp_string[temp_index - 1] === chord_notes[k].root) {\r\n                            string_potentials[i].push((temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length);\r\n                        }\r\n                    } else {\r\n                        if(temp_string[temp_index] === chord_notes[k].root) {\r\n                            string_potentials[i].push((temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length);\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            string_potentials[i].push(null);\r\n        }\r\n        console.log('* String Potentials ****************************************');\r\n        console.log(string_potentials);\r\n        console.log('************************************************************');\r\n        let arr = string_potentials;\r\n        let n = arr.length;\r\n        let indices = Array(n).fill(0);\r\n        let all_the_chords = [];\r\n\r\n        while(1) {\r\n            let new_chord = []\r\n            let lowest_fret = 1000;\r\n            let highest_fret = -1000;\r\n            let val;\r\n            for (let i = 0; i < n; i++) {\r\n                val = arr[i][indices[i]];\r\n                /* 0s and nulls not included in determining how many frets a chord spans */\r\n                if (val != 0 && val !== null && val > highest_fret) {\r\n                    highest_fret = val;\r\n                }\r\n                if (val != 0 && val !== null && val < lowest_fret) {\r\n                    lowest_fret = val;\r\n                } \r\n                new_chord.push(val);\r\n            }\r\n            if(highest_fret-lowest_fret < 5) {\r\n                all_the_chords.push(new_chord);\r\n            }\r\n            let next = n - 1;\r\n            while (next >= 0 && (indices[next] + 1 >= arr[next].length)) {\r\n                next--;\r\n            }\r\n            if (next < 0) {\r\n                break;\r\n            }\r\n            indices[next]++\r\n            for(let i = next + 1; i < n; i++) {\r\n                indices[i] = 0;\r\n            }\r\n            \r\n        }\r\n// https://www.geeksforgeeks.org/combinations-from-n-arrays-picking-one-element-from-each-array/\r\n        console.log('* all_the_chords ****************************************************');\r\n        console.log(all_the_chords);\r\n        console.log('* ************ ****************************************************');\r\n\r\n        return all_the_chords;\r\n\r\n    }\r\n}\r\n\r\n\r\n","import { \r\n    ADD_CHORD,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT, \r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES\r\n} from \"../constants/actionTypes.js\";\r\nimport { general_chord, generalCopy, general_note } from '../classes/generalChord.js';\r\nimport {chord_finder} from '../classes/specificChord.js';\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from '../constants/music.js';\r\n\r\nlet E_note = new general_note(E, NATURAL);\r\nlet A_note = new general_note(A, NATURAL);\r\nlet D_note = new general_note(D, NATURAL);\r\nlet G_note = new general_note(G, NATURAL);\r\nlet B_note = new general_note(B, NATURAL);\r\nlet TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\n\r\n\r\nlet chord1 = new general_chord;\r\nlet chord2 = new general_chord;\r\nlet chord3 = new general_chord;\r\nlet chord4 = new general_chord;\r\nchord2.root = 'B';\r\nchord3.root = 'C';\r\nchord4.root = 'D';\r\n\r\nlet find_chords = new chord_finder();\r\nconsole.log('\\n\\n\\nA$$$$$$$$$$$$$$$$');\r\nlet specific_arr1 = find_chords.getFingerPositions(chord1, TUNING, 9, 3);\r\nconsole.log('\\n\\n\\nB$$$$$$$$$$$$$$$$');\r\nlet specific_arr2 = find_chords.getFingerPositions(chord2, TUNING, 9, 3);\r\nconsole.log('\\n\\n\\nC$$$$$$$$$$$$$$$$');\r\nlet specific_arr3 = find_chords.getFingerPositions(chord3, TUNING, 9, 3);\r\nconsole.log('\\n\\n\\nD$$$$$$$$$$$$$$$$');\r\nlet specific_arr4 = find_chords.getFingerPositions(chord4, TUNING, 9, 3);\r\n\r\nconst initialState = {\r\n    active_index: 0,\r\n    chords: [chord1, chord2, chord3, chord4],\r\n    specific_chords: [ specific_arr1, specific_arr2, specific_arr3, specific_arr4 ]\r\n};\r\n\r\nfunction theReducer(state = initialState, action) {\r\n    /***********************************************************************************\r\n     * Add Chord\r\n     **********************************************************************************/\r\n    if (action.type === ADD_CHORD) {\r\n        return Object.assign({}, state, {\r\n            chords: state.chords.concat(action.payload)\r\n        });\r\n    /***********************************************************************************\r\n     * Change Active Index\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ACTIVE_INDEX) {\r\n        return Object.assign({}, state, {\r\n            active_index: action.payload,\r\n        });\r\n    /***********************************************************************************\r\n     * Change Root\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ROOT) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.root = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n        \r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr\r\n        });\r\n    /***********************************************************************************\r\n     * Change accidental\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ACCIDENTAL) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.accidental = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n        });\r\n    /***********************************************************************************\r\n     * Change Mode\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_MODE){\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.mode = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specififc_chords: new_spec_arr,\r\n        });\r\n    /***********************************************************************************\r\n     * Change Tri Notes\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_TRI_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.tri_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n        });\r\n    /***********************************************************************************\r\n     * Change Ext Notes\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_EXT_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.ext_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n        });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default theReducer;","import { createStore } from \"redux\";\r\nimport theReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(theReducer);\r\nexport default store;","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        chords: state.chords,\r\n        active_index: state.active_index\r\n    }\r\n}\r\n\r\nclass connected_Selector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n    handleScroll() {\r\n        let el = document.getElementById('chordHolder')\r\n        let scrollOffset = el.scrollLeft;\r\n        let itemWidth = el.offsetWidth / 3.0;\r\n        let i = 0;\r\n        while ((i) * itemWidth <= scrollOffset - (itemWidth/2.0)) {\r\n            i++;\r\n        }\r\n        if (i !== this.props.active_index) {\r\n            store.dispatch( changeActiveIndex(i) );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                chords,\r\n                active_index,\r\n            },\r\n            handleScroll\r\n        } = this;\r\n        return (\r\n            <ul id='chordHolder' onScroll={handleScroll}>\r\n                <li></li>\r\n                {chords.map((child, index) => {\r\n                    if (index === active_index) { \r\n                        return (<li className='selected'><h6>{child.getNameAsString()}</h6></li>);\r\n                    } else {\r\n                        return (<li><h6>{child.getNameAsString()}</h6></li>);\r\n                    }\r\n                })}\r\n                <li></li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\nconst Selector = connect(mapStateToProps)(connected_Selector); \r\nexport default Selector;\r\n","import { \r\n    ADD_CHORD,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT,\r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES\r\n } from \"../constants/actionTypes.js\";\r\n\r\nexport function addChord(the_stuff) {\r\n    return { \r\n        type: ADD_CHORD, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeActiveIndex(the_stuff) {\r\n    return { \r\n        type: CHANGE_ACTIVE_INDEX, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeRoot(the_stuff) {\r\n    return {\r\n        type: CHANGE_ROOT,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeAccidental(the_stuff) {\r\n    return {\r\n        type: CHANGE_ACCIDENTAL,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeMode(the_stuff) {\r\n    return {\r\n        type: CHANGE_MODE,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeTriNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_TRI_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeExtNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_EXT_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeRoot,\r\n    changeAccidental\r\n} from './actions/index.js'\r\n\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        root: state.chords[state.active_index].root,\r\n        accidental: state.chords[state.active_index].accidental\r\n    }\r\n}\r\n/*function mapDispatchToProps(dispatch) {\r\n    return {\r\n        changeRoot: root => dispatch(changeRoot(root))\r\n    },\r\n}*/\r\n\r\nclass connected_RSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n/*            active_index: store.getState().active_index,\r\n            root: store.getState().chords[ store.getState().active_index ].root,*/\r\n            /*accidental: store.getState().chords[ store.getState().active_index ].accidental,*/\r\n            showRMenu: false,\r\n            showAMenu: false,\r\n        }\r\n    }\r\n    rootClicker = () => {\r\n        this.setState({showRMenu: true});\r\n    }\r\n    rootSelector = (letter) => {\r\n        this.setState({\r\n            showRMenu: false,\r\n        });\r\n        store.dispatch(changeRoot(letter))\r\n    }\r\n    accClicker = () => {\r\n        this.setState({showAMenu: true});\r\n    }\r\n    accSelector = (symbol) => {\r\n        this.setState({\r\n            showAMenu: false,\r\n        });\r\n        store.dispatch(changeAccidental(symbol))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                root,\r\n                accidental\r\n            },\r\n            state: {\r\n                showRMenu,\r\n                showAMenu\r\n            },\r\n            rootClicker,\r\n            rootSelector,\r\n            accClicker,\r\n            accSelector\r\n        } = this;\r\n        let r;\r\n        let a;\r\n        if (showRMenu) {\r\n            r = \r\n                <ul id='root-menu'>\r\n                    <li onClick={rootSelector.bind(this, A)}><h6>{A}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, B)}><h6>{B}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, C)}><h6>{C}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, D)}><h6>{D}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, E)}><h6>{E}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, F)}><h6>{F}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, G)}><h6>{G}</h6></li>\r\n                </ul>\r\n        } else {\r\n            r = <div id='the-root' onClick={rootClicker}><h6>{root}</h6></div>\r\n        }\r\n        if (showAMenu) {\r\n            a = \r\n                <ul id='accidental-menu'>\r\n                    <li onClick={accSelector.bind(this, SHARP)}><h6>{SHARP}</h6></li>\r\n                    <li onClick={accSelector.bind(this, NATURAL)}><h6>{NATURAL}</h6></li>\r\n                    <li onClick={accSelector.bind(this, FLAT)}><h6>{FLAT}</h6></li>\r\n                </ul>\r\n        } else {\r\n            a = <div id='the-accidental' onClick={accClicker}><h6>{accidental}</h6></div>\r\n        }\r\n        return(\r\n            <div id='root-container'>\r\n                {r}\r\n                {a}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst RSelect = connect(mapStateToProps)(connected_RSelect); \r\nexport default RSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeMode} from './actions/index.js'\r\nimport {IONIAN, \r\n    DORIAN, \r\n    PHRYGIAN, \r\n    LYDIAN, \r\n    MIXOLYDIAN, \r\n    AEOLIAN, \r\n    LOCRIAN} from './constants/music.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        mode: state.chords[state.active_index].mode,\r\n    }\r\n}\r\n\r\nclass connected_MSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showMenu: false,\r\n        }\r\n    }\r\n    modeClicker = () => {\r\n        this.setState({showMenu: true});\r\n    }\r\n    modeSelector = (string) => {\r\n        this.setState({\r\n            showMenu: false,\r\n        });\r\n        store.dispatch(changeMode(string))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                mode\r\n            },\r\n            state: {\r\n                showMenu,\r\n            },\r\n            modeClicker,\r\n            modeSelector,\r\n        } = this;\r\n        \r\n        if (!showMenu) {\r\n            return(    \r\n              <div id='mode-container'>\r\n                <div id='the-mode' onClick={modeClicker}><h6>{mode}</h6></div>\r\n              </div>  \r\n            );\r\n        } else {\r\n            return(\r\n                <div id='mode-container'>\r\n                    <ul id='mode-list'>\r\n                        <li onClick={modeSelector.bind(this, IONIAN)}><h6>{IONIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, DORIAN)}><h6>{DORIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, PHRYGIAN)}><h6>{PHRYGIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LYDIAN)}><h6>{LYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, MIXOLYDIAN)}><h6>{MIXOLYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, AEOLIAN)}><h6>{AEOLIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LOCRIAN)}><h6>{LOCRIAN}</h6></li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nconst MSelect = connect(mapStateToProps)(connected_MSelect); \r\nexport default MSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeTriNotes} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tri_notes: state.chords[state.active_index].tri_notes,\r\n    }\r\n}\r\n\r\nclass connected_TSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    triItemOnClick = (index) => {\r\n        let arr = this.props.tri_notes.slice();\r\n        for (let i= 0; i < arr.length; i++) {\r\n        }\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeTriNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                tri_notes\r\n            },\r\n            triItemOnClick\r\n        } = this\r\n        console.log(tri_notes);\r\n        const tri_list_items = tri_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {triItemOnClick.bind(this, index)}> <h6>{index * 2 + 1}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='tri-list'>\r\n                {tri_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst TSelect = connect(mapStateToProps)(connected_TSelect); \r\nexport default TSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeExtNotes} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ext_notes: state.chords[state.active_index].ext_notes,\r\n    }\r\n}\r\n\r\nclass connected_ESelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    extItemOnClick = (index) => {\r\n        let arr = this.props.ext_notes.slice();\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeExtNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                ext_notes\r\n            },\r\n            extItemOnClick\r\n        } = this\r\n\r\n        const ext_list_items = ext_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {extItemOnClick.bind(this, index)}> <h6>{index * 2 + 7}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='ext-list'>\r\n                {ext_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst ESelect = connect(mapStateToProps)(connected_ESelect); \r\nexport default ESelect;\r\n","import React, { Component } from 'react';\r\nimport RSelect from './rootSelector.js';\r\nimport MSelect from './modeSelector.js';\r\nimport TSelect from './triSelector.js';\r\nimport ESelect from './extSelector.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nclass DCPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n /*       this.state = {\r\n            root: 'C',\r\n            accidental: '=',\r\n            mode: 'Aeolian',\r\n            tri_notes: [true, true, false],\r\n            ext_notes: [true, false, false, false]\r\n        }*/\r\n    }\r\n    /*triOnClick = (index) => {\r\n        let arr = this.state.tri_notes;\r\n        arr[index] = !arr[index];\r\n        this.setState({tri_notes: arr})\r\n        console.log(index);\r\n    }*/\r\n   /* extOnClick = (index) => {\r\n        let arr = this.state.ext_notes;\r\n        arr[index] = !arr[index];\r\n        this.setState({ext_notes: arr})\r\n        console.log(index);\r\n    }*/\r\n\r\n    render() {\r\n       /* const {\r\n            triOnClick,\r\n            extOnClick\r\n        } = this*/\r\n       /* const tri_list_items = this.state.tri_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {triOnClick.bind(this, index)}> <h6>{index * 2 + 1}</h6> </li>\r\n        });*/\r\n        /*const ext_list_items = this.state.ext_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {extOnClick.bind(this, index)}> <h6>{index * 2 + 7}</h6> </li>\r\n        });*/\r\n\r\n        return (\r\n            <div class='panel-wrap'>\r\n                <div id='theroot'>\r\n                    <h3>Root:</h3>\r\n                    <RSelect />\r\n                </div>\r\n                <div id='mode'>\r\n                    <h3>Mode:</h3>\r\n                    <MSelect />\r\n                </div>\r\n                <div id='triad'>\r\n                    <h3><span>Triad:</span></h3>\r\n                    <TSelect />\r\n                </div>\r\n                <div id='extensions'>\r\n                    <h3><span>Ext:</span></h3>\r\n                    <ESelect />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DCPanel;\r\n\r\n/*\r\n        <ul id='tri-list'>\r\n            <li id='one'>1</li>\r\n            <li id='three'>3</li>\r\n            <li id='five'>5</li>\r\n        </ul>\r\n*/\r\n\r\n/*\r\n        makeTriList = () => {\r\n            this.state.tri_notes.map(function(bool, index){\r\n                let class_list=\"\"\r\n                if (bool) {\r\n                    class_list += 'selected-note';\r\n                } \r\n                return <li \r\n                    className={class_list}\r\n                    label={index}\r\n                    onClick = {liOnClick}> {index * 2 + 1} </li>\r\n            });\r\n        }\r\n        makeExtList = () => {\r\n            this.state.ext_notes.map(function(bool, index){\r\n                let class_list=\"\"\r\n                if (bool) {\r\n                    class_list += 'selected-note';\r\n                } \r\n                return <li \r\n                    className={class_list}\r\n                    label={index}\r\n                    onClick = {liOnClick}> {index * 2 + 7} </li>\r\n            });\r\n        }\r\n        tri_list_items = makeTriList();\r\n        ext_list_items = makeExtList();\r\n*/","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport ChordTab from './chordTab.js';\r\nimport {general_chord, general_note} from './classes/generalChord.js';\r\nimport {chord_finder} from './classes/specificChord.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        specific_chords: state.specific_chords[state.active_index],\r\n    }\r\n}\r\n\r\nclass connected_ChordViz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                specific_chords\r\n            },\r\n        } = this;\r\n       /* let find_chords = new chord_finder();\r\n        let the_chord = new general_chord();\r\n        the_chord.root=B;\r\n        the_chord.accidental=FLAT;\r\n        let a_chord =  new general_chord();\r\n        let d_chord = new general_chord();\r\n        d_chord.root = C;\r\n        d_chord.mode = MIXOLYDIAN;\r\n\r\n        let chord_notes = find_chords.findChordNotes(d_chord);\r\n        console.log(chord_notes);\r\n        \r\n        let E_note = new general_note(E, NATURAL);\r\n        let A_note = new general_note(A, NATURAL);\r\n        let D_note = new general_note(D, NATURAL);\r\n        let G_note = new general_note(G, NATURAL);\r\n        let B_note = new general_note(B, NATURAL);\r\n        let TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\n        \r\n        let spectate = find_chords.getFingerPositions(d_chord, TUNING, 9, 2);\r\n        console.log(spectate);*.\r\n/******************************************************************************************** */\r\n        let makeSVG = (notes) => {\r\n            let string_number = notes.length;\r\n            let string_span = 100/(string_number + 1);\r\n\r\n            let x_coords = [];\r\n            for (let i = 0; i < string_number; i++) {\r\n                x_coords.push(((i+1) * string_span) +'%');\r\n            }\r\n            let fret_number = 5;\r\n            let fret_span = 100/(fret_number + 1);\r\n            let y_coords = [];\r\n            for (let i = 0; i < fret_number + 1; i++) {\r\n                y_coords.push(((i+1) * fret_span) + '%');\r\n            }\r\n            let fret_x1 = (fret_span - 7) + '%';\r\n            let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n            \r\n            let circle_radius = (string_span / 2.5);\r\n            let radius_str = circle_radius +'%';\r\n            \r\n            let hi_fret = -100;\r\n            let lo_fret = 100;\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] < lo_fret) {\r\n                    lo_fret = notes[i];\r\n                }\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] > hi_fret) {\r\n                    hi_fret = notes[i];\r\n                }\r\n            }\r\n            let chord_span;\r\n            if (hi_fret === 100) {\r\n                chord_span = 0;\r\n            } else {\r\n                chord_span = hi_fret - lo_fret + 1;\r\n            }\r\n            let chord_padding = Math.floor((fret_number - chord_span) / 2);\r\n            \r\n            let chord_shift = lo_fret - chord_padding;\r\n            let diagram_base;\r\n            if(chord_shift < 0) {\r\n                chord_shift = 1;\r\n                diagram_base = 1\r\n            } else {\r\n                diagram_base = chord_shift;\r\n            }\r\n\r\n            let shifted_notes = []\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] === null){\r\n                    shifted_notes.push(null);\r\n                } else if (notes[i] === 0) {\r\n                    shifted_notes.push(1);\r\n                } else {\r\n                    shifted_notes.push(notes[i] - chord_shift + 2);\r\n                }\r\n            }\r\n            return(\r\n                <li>\r\n                    <svg class='the-svg' style={{margin: 'auto', width:'70%', height:'70%'}}>\r\n                        {y_coords.map((y_coord, index)=> {\r\n                            if (index === 0) {\r\n                                return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                            } else {\r\n                                return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                            }\r\n                        })}\r\n                        <text x='2%' y={(fret_span-1) + '%'} fill=\"white\">0</text>\r\n                        <text x='2%' y={(fret_span+5) + '%'} fill=\"white\">{diagram_base}</text>\r\n                        {x_coords.map(x_coord => {\r\n                            return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                        })}\r\n\r\n                        {shifted_notes.map((note, index) => {\r\n                            if (note === null) {\r\n                                return\r\n                            } else {\r\n                                let x_center = string_span*(index+1) +'%';\r\n                                let y_center = fret_span*note - circle_radius + '%';\r\n                                return <circle cx= {x_center} cy={y_center} r={radius_str} fill='yellow'></circle>\r\n                            }\r\n                        })}\r\n                    </svg>\r\n                </li>\r\n            );\r\n        }\r\n\r\n        //let arrss = [[1, null, 1, 1, 1, null]];\r\n        //let arrs = [[9, 11, 11, 10, 9, 9], [7, null, 8, 8, 7, null], [4, null, 4, 4, 4, null]];\r\n        return(\r\n            <ul id='svg-list'>\r\n                {specific_chords.map(arr => {return makeSVG(arr)})}    \r\n            </ul>\r\n        );\r\n    }\r\n}\r\nconst ChordViz = connect(mapStateToProps)(connected_ChordViz); \r\nexport default ChordViz;","\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\nimport {note_instance, chord_instance} from './classes/specificChord.js';\r\n\r\nclass ChordTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n/*        let notes = [\r\n            {'string': 1, 'fret': 3},\r\n            {'string': 3, 'fret': 4},\r\n            {'string': 4, 'fret': 4},\r\n            {'string': 5, 'fret': 3},\r\n        ]*/\r\n        let makeSVG = (notes) => {\r\n            let string_number = notes.length;\r\n            let string_span = 100/(string_number + 1);\r\n\r\n            let x_coords = [];\r\n            for (let i = 0; i < string_number; i++) {\r\n                x_coords.push(((i+1) * string_span) +'%');\r\n            }\r\n            let fret_number = 5;\r\n            let fret_span = 100/(fret_number + 1);\r\n            let y_coords = [];\r\n            for (let i = 0; i < fret_number + 1; i++) {\r\n                console.log(\"fretspan: \" + fret_span);\r\n                console.log(\"fret: \" + (i+1));\r\n\r\n                y_coords.push(((i+1) * fret_span) + '%');\r\n            }\r\n            console.log('*************y_coords***********');\r\n            console.log(\"fretspan: \" + fret_span);\r\n            console.log(y_coords);\r\n            console.log('*************y_coords***********\\n');\r\n            let fret_x1 = (fret_span - 7) + '%';\r\n            let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n            \r\n            let circle_radius = (string_span / 2.5);\r\n            let radius_str = circle_radius +'%';\r\n            \r\n            let hi_fret = -100;\r\n            let lo_fret = 100;\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] < lo_fret) {\r\n                    lo_fret = notes[i];\r\n                }\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] > hi_fret) {\r\n                    hi_fret = notes[i];\r\n                }\r\n            }\r\n            let chord_span;\r\n            if (hi_fret === 100) {\r\n                chord_span = 0;\r\n            } else {\r\n                chord_span = hi_fret - lo_fret + 1;\r\n            }\r\n            let chord_padding = Math.floor((fret_number - chord_span) / 2);\r\n            \r\n            let chord_shift = lo_fret - chord_padding;\r\n            console.log(\"hi_fret: \" + hi_fret);\r\n            console.log(\"lo_fret: \" + lo_fret);\r\n            console.log(\"chord_span: \" + chord_span);\r\n            console.log(\"chord_padding: \" + chord_padding);\r\n            console.log(\"chord_shift: \" + chord_shift);\r\n            console.log('0');\r\n            console.log(lo_fret - chord_padding);\r\n            console.log(hi_fret + chord_padding);\r\n            console.log('*********************************');\r\n            let shifted_notes = []\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] === null){\r\n                    shifted_notes.push(null);\r\n                } else if (notes[i] === 0) {\r\n                    shifted_notes.push(1);\r\n                } else {\r\n                    shifted_notes.push(notes[i] - chord_shift + 2);\r\n                }\r\n            }\r\n            return(\r\n                <svg style={{width:'100%', height:'100%'}}>\r\n                    {y_coords.map((y_coord, index)=> {\r\n                        if (index === 0) {\r\n                            return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                        } else {\r\n                            return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                        }\r\n                    })}\r\n                    <text x='2%' y={(fret_span-1) + '%'} fill=\"white\">0</text>\r\n                    <text x='2%' y={(fret_span+5) + '%'} fill=\"white\">{chord_shift}</text>\r\n                    {x_coords.map(x_coord => {\r\n                        return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                    })}\r\n                        {console.log('*************y_centers***********')}\r\n\r\n                    {shifted_notes.map((note, index) => {\r\n                        if (note === null) {\r\n                            return\r\n                        } else {\r\n                            let x_center = string_span*(index+1) +'%';\r\n                            let y_center = fret_span*note - circle_radius + '%';\r\n                            console.log(\"fretspan: \" + fret_span);\r\n                            console.log(\"note: \" + note);\r\n                            console.log(y_center);\r\n                            return <circle cx= {x_center} cy={y_center} r={radius_str} fill='yellow'></circle>\r\n                        }\r\n                    })}\r\n                    {console.log('*************y_centers***********\\n')}\r\n                </svg>\r\n            );\r\n        }\r\n        /*let myChord = new chord_instance(); \r\n        let string_number = 6\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 5;\r\n        let fret_span =  100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (fret_span - 7) + '%'\r\n        let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n\r\n        let circle_radius = (string_span / 2.5);\r\n        let radius_str = circle_radius +'%';\r\n        let x_coord = string_span*1 + '%';\r\n        let y_coord = fret_span*5 - circle_radius + '%';\r\n        \r\n        console.log('x*************************')\r\n        console.log (x_coords);\r\n        console.log(x_coord);\r\n        console.log('y**********************')\r\n        console.log(y_coord);\r\n        console.log(y_coords);*/\r\n        //let arr = [7, null, 8, 8, 7, null];\r\n        let arr = [9, 11, 11, 10, 9, 9];\r\n        return(\r\n                makeSVG(arr)\r\n                /*<svg style={{width:'100%', height:'100%'}}>\r\n                    <line x1={fret_x1} y1={y_coords[0]} x2={fret_x2} y2={y_coords[0]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[1]} x2={fret_x2} y2={y_coords[1]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[2]} x2={fret_x2} y2={y_coords[2]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[3]} x2={fret_x2} y2={y_coords[3]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[4]} x2={fret_x2} y2={y_coords[4]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[5]} x2={fret_x2} y2={y_coords[5]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    \r\n                    <line x1={x_coords[5]} y1='0%' x2={x_coords[5]} y2='100%' style={{stroke: 'white', width: '10'}}></line>\r\n                    <line x1={x_coords[4]} y1='0%' x2={x_coords[4]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[3]} y1='0%' x2={x_coords[3]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[2]} y1='0%' x2={x_coords[2]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[1]} y1='0%' x2={x_coords[1]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[0]} y1='0%' x2={x_coords[0]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    {notes.map(note => {\r\n                        let x_coord = string_span*note.string +'%';\r\n                        let y_coord = fret_span*note.fret-circle_radius + '%';\r\n                        return <circle cx= {x_coord} cy={y_coord} r={radius_str} fill='yellow'></circle>\r\n                    })}\r\n\r\n                </svg>*/\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChordTab;","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Header from './Header.js';\nimport Cards, {Card1, Card2, Card3} from './Cards.js';\nimport Tabs from './Tabs.js';\nimport Selector from './Selector.js';\nimport DCPanel from './defineChordPanel.js';\nimport ChordViz from './chordViz.js';\nimport './App.css';\n\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nlet letter_options = letters.map(opt => ({label: opt, value: opt}));\n\nclass App extends Component {\n  render() {\n    console.log(window.innerHeight);\n    return (\n      <div className=\"Wrapper\">\n        <Header />\n        <div id='topCardHolder'>\n        </div>\n        <div id=\"slide\">\n          <div id=\"chordBackdrop\">\n            <ChordViz />\n          </div>\n          <div id='spacer'></div>\n          <div id='triHolder'>\n            <div id='triangle'></div>\n          </div>\n          <div id='description'>\n            <Selector />\n            <Tabs>\n              <div id='define' label='Define Chord'>\n                <DCPanel />\n              </div>\n              <div id='set' label='Set Note' style={{marginTop: '10%', alignContent: 'center'}}>\n                <label>Set Note: </label>\n                <input></input>\n                <button>Submit</button>\n              </div>\n              <div id='search' label='Search Space'>\n                <div style={{marginBottom: '10%', marginTop: '10%', textAlign: 'center'}}>\n                  <label>Low Fret: </label>\n                  <input></input>\n                </div>\n                <div>\n                  <label>High Fret: </label>\n                  <input></input>\n                </div>\n                <button>Submit</button>\n              </div> \n            </Tabs>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n/*<input></input>\n<button>Submit</button>\n*/\n/*\n          <div id='botCardHolder'>\n            <Card2 />\n          </div>\n*/\n/*\n<div id='panelWrap'>\n<div id='panel1'>\n  <div id='root'></div>\n  <div id='mode'></div>\n  <div id='triad'></div>\n  <div id='extensions'></div>\n</div>\n<div id='panel2' className='hide'></div>\n<div id='panel3' className='hide'></div>\n</div>\n<ul id='panelNav'>\n<li><h6>Chord<br/>Description</h6></li>\n<li><h6>Set<br/>Note</h6></li>\n<li><h6>Search<br/>Space</h6></li>\n</ul>\n*/\n\n/*\n                  <Select \n                    options={letter_options}\n                    onChange={opt => console.log(opt.value)}\n                    className={'root'}\n                    classNamePrefix={'rooter'}\n                    styles={\n                      {option: (state) => ({\n                        borderBottom: '2px solid red',\n                        height: '50%',\n                        color: 'black',\n                      }),\n                      valueContainer:(state) => ({\n                        overflow: 'scroll',\n                      })\n\n                    }\n                    }\n\n                  /> */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/index.js';\nimport { Provider } from 'react-redux';\n/*import ADD_CHORD from \"./actionTypes/index\";*/\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App /> \n    </Provider>,\n    document.getElementById('root')\n    \n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}