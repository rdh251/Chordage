{"version":3,"sources":["Header.js","Tab.js","Cards.js","Tabs.js","constants/actionTypes.js","constants/music.js","classes/generalChord.js","reducers/index.js","store/index.js","Selector.js","actions/index.js","rootSelector.js","modeSelector.js","triSelector.js","extSelector.js","defineChordPanel.js","classes/specificChord.js","chordTab.js","chordViz.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Tab","onClick","_this$props","_this","props","label","this","_this$props2","activeTab","label_arr","split","Tabs","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClickTabItem","tab","setState","state","children","map","child","src_Tab","key","ADD_CHORD","CHANGE_ACTIVE_INDEX","CHANGE_ROOT","CHANGE_ACCIDENTAL","CHANGE_MODE","CHANGE_TRI_NOTES","CHANGE_EXT_NOTES","A","B","C","D","E","G","SHARP","NATURAL","FLAT","IONIAN","general_note","the_root","the_accidental","root","accidental","general_chord","mode","tri_notes","ext_notes","createClass","value","string_name","k","i","generalCopy","clone","old","chord1","chord2","chord3","chord4","initialState","active_index","chords","theReducer","arguments","length","undefined","action","type","assign","concat","payload","copy_me","the_clone","new_arr","slice","store","createStore","connected_Selector","handleScroll","bind","assertThisInitialized","el","document","getElementById","scrollOffset","scrollLeft","itemWidth","offsetWidth","dispatch","id","onScroll","index","getNameAsString","Selector","connect","connected_RSelect","rootClicker","showRMenu","rootSelector","letter","accClicker","showAMenu","accSelector","symbol","r","_this$state","RSelect","connected_MSelect","modeClicker","showMenu","modeSelector","string","MSelect","connected_TSelect","triItemOnClick","arr","console","log","tri_list_items","bool","class_list","TSelect","connected_ESelect","extItemOnClick","ext_list_items","ESelect","DCPanel","class","src_rootSelector","src_modeSelector","triSelector","extSelector","chord_instance","tuning","temp_string","E_note","chord_finder","findChordNotes","the_scale","find_general_scale","notes_in_chord","push","getFingerPositions","chord_notes","h_fret_bound","l_fret_bound","tuning_temp_indexes","start_fret","indexOf","string_potentials","j","temp_index","n","indices","Array","fill","all_the_chords","new_chord","lowest_fret","highest_fret","val","next","active_strings","low_fret_bound","high_fret_bound","required_notes","general_notes","stepper","step_start","build_flat_scale","top_7","step_finder","build_sharp_scale","flat_scale","sharp_scale","flat_fail","flat_count","previous_root","sharp_fail","sharp_count","ChordTab","x_coords","y_coords","fret_number","fret_x1","fret_x2","fret_span","style","width","height","x1","y1","x2","y2","stroke","fret","note","x_coord","y_coord","cx","cy","ChordViz","find_chords","the_chord","d_chord","TUNING","spectate","margin","border","viewbox","chordTab","App","opt","window","innerHeight","src_Header","chordViz","src_Selector","src_Tabs","defineChordPanel","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b793b3c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <h1>Chordage</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\n// FROM:\r\n// https://alligator.io/react/tabs-component/\r\nclass Tab extends Component {\r\n    static propTypes = {\r\n        activeTab: PropTypes.string.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func.isRequired,\r\n    }\r\n    onClick = () => {\r\n        const {label, onClick} = this.props;\r\n        onClick(label);\r\n    }\r\n     \r\n    render() {\r\n        const {\r\n            onClick,\r\n            props: {\r\n                activeTab,\r\n                label,\r\n            },\r\n        } = this;\r\n        let label_arr = label.split(' ');\r\n        \r\n        let className = 'tab-list-item';\r\n\r\n        if (activeTab === label) {\r\n            className += ' tab-list-active';\r\n        }\r\n\r\n        return (\r\n            <li\r\n                className = {className}\r\n                onClick = {onClick}\r\n            ><h6>{label_arr[0]}<br/>{label_arr[1]}</h6></li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tab;\r\n","import React, { Component } from 'react';\r\n\r\nclass Card1 extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"card1\" className=\"card\"></div>\r\n        );\r\n    }\r\n}\r\nclass Card2 extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"card2\" className=\"card\"></div>\r\n        );\r\n    }\r\n}\r\nclass Card3 extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"card3\" className=\"card\"></div>\r\n        );\r\n    }\r\n}\r\nexport {\r\n    Card1,\r\n    Card2,\r\n    Card3\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nimport Tab from './Tab';\r\n\r\n// FROM: \r\n// https://alligator.io/react/tabs-component/\r\nclass Tabs extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.instanceOf(Array).isRequired,\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: this.props.children[0].props.label\r\n        };\r\n    }\r\n\r\n    onClickTabItem = (tab) => {\r\n        this.setState({activeTab: tab});\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            onClickTabItem,\r\n            props: {\r\n                children,\r\n            },\r\n            state: {\r\n                activeTab,\r\n            }\r\n        } = this;\r\n\r\n        return (\r\n            <div className = 'tabs'>\r\n                <div className='tab-content'>\r\n                    {children.map((child) => {\r\n                        if (child.props.label !== activeTab) {\r\n                            return undefined;\r\n                        }\r\n                        return child.props.children;\r\n                    })}\r\n                </div>\r\n                <ol className = 'tab-list'>\r\n                    {children.map((child) => {\r\n                        const { label} = child.props;\r\n                        return (\r\n                            <Tab\r\n                                activeTab = {activeTab}\r\n                                key = {label}\r\n                                label = {label}\r\n                                onClick = {onClickTabItem}\r\n                            />\r\n                        );\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Tabs;","export const ADD_CHORD = 'ADD_CHORD';\r\nexport const CHANGE_ACTIVE_INDEX = 'CHANGE_ACTIVE_INDEX';\r\nexport const CHANGE_ROOT = 'CHANGE_ROOT';\r\nexport const CHANGE_ACCIDENTAL = 'CHANGE_ACCIDENTAL';\r\nexport const CHANGE_MODE = 'CHANGE_MODE';\r\nexport const CHANGE_TRI_NOTES = 'CHANGE_TRI_NOTES';\r\nexport const CHANGE_EXT_NOTES = 'CHANGE_EXT_NOTES';\r\n","/* Notes ******************************/\r\nexport const A = 'A';\r\nexport const B = 'B';\r\nexport const C = 'C';\r\nexport const D = 'D';\r\nexport const E = 'E';\r\nexport const F = 'F';\r\nexport const G = 'G';\r\n\r\n/* Accidentals *************************/\r\nexport const SHARP = '\\u266F';\r\nexport const NATURAL = '\\u266E';\r\nexport const FLAT = '\\u266D';\r\n\r\n/* Modes *******************************/\r\nexport const IONIAN = 'Ionian';\r\nexport const DORIAN = 'Dorian';\r\nexport const PHRYGIAN = 'Phrygian';\r\nexport const LYDIAN = 'Lydian';\r\nexport const MIXOLYDIAN = 'Mixolydian';\r\nexport const AEOLIAN = 'Aeolian';\r\nexport const LOCRIAN = 'Locrian';","import {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\n\r\nexport class general_note {\r\n    constructor(the_root, the_accidental) {\r\n        this.root = the_root;\r\n        this.accidental = the_accidental;\r\n    }\r\n}\r\n\r\nexport class general_chord {\r\n    constructor() {\r\n        this.root = A;\r\n        this.accidental = NATURAL \r\n        this.mode = IONIAN;\r\n        this.tri_notes = [true, true, false];\r\n        this.ext_notes = [true, false, false, false];\r\n    }\r\n    getNameAsString() {\r\n        let string_name = this.root\r\n        if (this.accidental !== NATURAL) {\r\n            string_name += this.accidental;\r\n        }\r\n        if (this.mode === IONIAN ||\r\n            this.mode === LYDIAN) {\r\n                string_name += 'maj';\r\n        } else if (this.mode === MIXOLYDIAN) {\r\n            string_name += 'dom';\r\n        } else if (this.mode === LOCRIAN) {\r\n            string_name += 'dim';\r\n        }\r\n        else {\r\n            string_name += 'min'\r\n        }\r\n        let k = 0;\r\n        for (let i = 7; i <= 13; i += 2) {\r\n            if (this.ext_notes[k]) {\r\n                string_name = string_name + ' ' + i;\r\n            }\r\n            k++;\r\n        }\r\n        return string_name;\r\n    }\r\n}\r\nexport function generalCopy(clone, old) {\r\n    clone.root = old.root;\r\n    clone.accidental = old.accidental;\r\n    clone.mode = old.mode;\r\n    clone.tri_notes = old.tri_notes;\r\n    clone.ext_notes = old.ext_notes;\r\n}","import { \r\n    ADD_CHORD,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT, \r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES\r\n} from \"../constants/actionTypes.js\";\r\nimport { general_chord, generalCopy } from '../classes/generalChord.js';\r\n\r\nlet chord1 = new general_chord;\r\nlet chord2 = new general_chord;\r\nlet chord3 = new general_chord;\r\nlet chord4 = new general_chord;\r\n\r\nchord2.root = 'B';\r\nchord3.root = 'C';\r\nchord4.root = 'D';\r\n\r\n\r\nconst initialState = {\r\n    active_index: 0,\r\n    chords: [chord1, chord2, chord3, chord4],\r\n};\r\n\r\nfunction theReducer(state = initialState, action) {\r\n    if (action.type === ADD_CHORD) {\r\n        return Object.assign({}, state, {\r\n            chords: state.chords.concat(action.payload)\r\n        });\r\n    } else if (action.type === CHANGE_ACTIVE_INDEX) {\r\n        return Object.assign({}, state, {\r\n            active_index: action.payload,\r\n        });\r\n    } else if (action.type === CHANGE_ROOT) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.root = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n        });\r\n    } else if (action.type === CHANGE_ACCIDENTAL) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.accidental = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n        });\r\n    } else if (action.type === CHANGE_MODE){\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.mode = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n        });\r\n    } else if (action.type === CHANGE_TRI_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.tri_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n        });\r\n    } else if (action.type === CHANGE_EXT_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.ext_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n        });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default theReducer;","import { createStore } from \"redux\";\r\nimport theReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(theReducer);\r\nexport default store;","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        chords: state.chords,\r\n        active_index: state.active_index\r\n    }\r\n}\r\n\r\nclass connected_Selector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n    handleScroll() {\r\n        let el = document.getElementById('chordHolder')\r\n        let scrollOffset = el.scrollLeft;\r\n        let itemWidth = el.offsetWidth / 3.0;\r\n        let i = 0;\r\n        while ((i) * itemWidth <= scrollOffset - (itemWidth/2.0)) {\r\n            i++;\r\n        }\r\n        if (i !== this.props.active_index) {\r\n            store.dispatch( changeActiveIndex(i) );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                chords,\r\n                active_index,\r\n            },\r\n            handleScroll\r\n        } = this;\r\n        return (\r\n            <ul id='chordHolder' onScroll={handleScroll}>\r\n                <li></li>\r\n                {chords.map((child, index) => {\r\n                    if (index === active_index) { \r\n                        return (<li className='selected'><h6>{child.getNameAsString()}</h6></li>);\r\n                    } else {\r\n                        return (<li><h6>{child.getNameAsString()}</h6></li>);\r\n                    }\r\n                })}\r\n                <li></li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\nconst Selector = connect(mapStateToProps)(connected_Selector); \r\nexport default Selector;\r\n","import { \r\n    ADD_CHORD,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT,\r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES\r\n } from \"../constants/actionTypes.js\";\r\n\r\nexport function addChord(the_stuff) {\r\n    return { \r\n        type: ADD_CHORD, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeActiveIndex(the_stuff) {\r\n    return { \r\n        type: CHANGE_ACTIVE_INDEX, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeRoot(the_stuff) {\r\n    return {\r\n        type: CHANGE_ROOT,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeAccidental(the_stuff) {\r\n    return {\r\n        type: CHANGE_ACCIDENTAL,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeMode(the_stuff) {\r\n    return {\r\n        type: CHANGE_MODE,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeTriNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_TRI_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeExtNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_EXT_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeRoot,\r\n    changeAccidental\r\n} from './actions/index.js'\r\n\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        root: state.chords[state.active_index].root,\r\n        accidental: state.chords[state.active_index].accidental\r\n    }\r\n}\r\n/*function mapDispatchToProps(dispatch) {\r\n    return {\r\n        changeRoot: root => dispatch(changeRoot(root))\r\n    },\r\n}*/\r\n\r\nclass connected_RSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n/*            active_index: store.getState().active_index,\r\n            root: store.getState().chords[ store.getState().active_index ].root,*/\r\n            /*accidental: store.getState().chords[ store.getState().active_index ].accidental,*/\r\n            showRMenu: false,\r\n            showAMenu: false,\r\n        }\r\n    }\r\n    rootClicker = () => {\r\n        this.setState({showRMenu: true});\r\n    }\r\n    rootSelector = (letter) => {\r\n        this.setState({\r\n            showRMenu: false,\r\n        });\r\n        store.dispatch(changeRoot(letter))\r\n    }\r\n    accClicker = () => {\r\n        this.setState({showAMenu: true});\r\n    }\r\n    accSelector = (symbol) => {\r\n        this.setState({\r\n            showAMenu: false,\r\n        });\r\n        store.dispatch(changeAccidental(symbol))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                root,\r\n                accidental\r\n            },\r\n            state: {\r\n                showRMenu,\r\n                showAMenu\r\n            },\r\n            rootClicker,\r\n            rootSelector,\r\n            accClicker,\r\n            accSelector\r\n        } = this;\r\n        let r;\r\n        let a;\r\n        if (showRMenu) {\r\n            r = \r\n                <ul id='root-menu'>\r\n                    <li onClick={rootSelector.bind(this, A)}><h6>{A}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, B)}><h6>{B}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, C)}><h6>{C}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, D)}><h6>{D}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, E)}><h6>{E}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, F)}><h6>{F}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, G)}><h6>{G}</h6></li>\r\n                </ul>\r\n        } else {\r\n            r = <div id='the-root' onClick={rootClicker}><h6>{root}</h6></div>\r\n        }\r\n        if (showAMenu) {\r\n            a = \r\n                <ul id='accidental-menu'>\r\n                    <li onClick={accSelector.bind(this, SHARP)}><h6>{SHARP}</h6></li>\r\n                    <li onClick={accSelector.bind(this, NATURAL)}><h6>{NATURAL}</h6></li>\r\n                    <li onClick={accSelector.bind(this, FLAT)}><h6>{FLAT}</h6></li>\r\n                </ul>\r\n        } else {\r\n            a = <div id='the-accidental' onClick={accClicker}><h6>{accidental}</h6></div>\r\n        }\r\n        return(\r\n            <div id='root-container'>\r\n                {r}\r\n                {a}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst RSelect = connect(mapStateToProps)(connected_RSelect); \r\nexport default RSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeMode} from './actions/index.js'\r\nimport {IONIAN, \r\n    DORIAN, \r\n    PHRYGIAN, \r\n    LYDIAN, \r\n    MIXOLYDIAN, \r\n    AEOLIAN, \r\n    LOCRIAN} from './constants/music.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        mode: state.chords[state.active_index].mode,\r\n    }\r\n}\r\n\r\nclass connected_MSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showMenu: false,\r\n        }\r\n    }\r\n    modeClicker = () => {\r\n        this.setState({showMenu: true});\r\n    }\r\n    modeSelector = (string) => {\r\n        this.setState({\r\n            showMenu: false,\r\n        });\r\n        store.dispatch(changeMode(string))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                mode\r\n            },\r\n            state: {\r\n                showMenu,\r\n            },\r\n            modeClicker,\r\n            modeSelector,\r\n        } = this;\r\n        \r\n        if (!showMenu) {\r\n            return(    \r\n              <div id='mode-container'>\r\n                <div id='the-mode' onClick={modeClicker}><h6>{mode}</h6></div>\r\n              </div>  \r\n            );\r\n        } else {\r\n            return(\r\n                <div id='mode-container'>\r\n                    <ul id='mode-list'>\r\n                        <li onClick={modeSelector.bind(this, IONIAN)}><h6>{IONIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, DORIAN)}><h6>{DORIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, PHRYGIAN)}><h6>{PHRYGIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LYDIAN)}><h6>{LYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, MIXOLYDIAN)}><h6>{MIXOLYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, AEOLIAN)}><h6>{AEOLIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LOCRIAN)}><h6>{LOCRIAN}</h6></li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nconst MSelect = connect(mapStateToProps)(connected_MSelect); \r\nexport default MSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeTriNotes} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tri_notes: state.chords[state.active_index].tri_notes,\r\n    }\r\n}\r\n\r\nclass connected_TSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    triItemOnClick = (index) => {\r\n        let arr = this.props.tri_notes.slice();\r\n        for (let i= 0; i < arr.length; i++) {\r\n        }\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeTriNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                tri_notes\r\n            },\r\n            triItemOnClick\r\n        } = this\r\n        console.log(tri_notes);\r\n        const tri_list_items = tri_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {triItemOnClick.bind(this, index)}> <h6>{index * 2 + 1}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='tri-list'>\r\n                {tri_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst TSelect = connect(mapStateToProps)(connected_TSelect); \r\nexport default TSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeExtNotes} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ext_notes: state.chords[state.active_index].ext_notes,\r\n    }\r\n}\r\n\r\nclass connected_ESelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    extItemOnClick = (index) => {\r\n        let arr = this.props.ext_notes.slice();\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeExtNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                ext_notes\r\n            },\r\n            extItemOnClick\r\n        } = this\r\n\r\n        const ext_list_items = ext_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {extItemOnClick.bind(this, index)}> <h6>{index * 2 + 7}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='ext-list'>\r\n                {ext_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst ESelect = connect(mapStateToProps)(connected_ESelect); \r\nexport default ESelect;\r\n","import React, { Component } from 'react';\r\nimport RSelect from './rootSelector.js';\r\nimport MSelect from './modeSelector.js';\r\nimport TSelect from './triSelector.js';\r\nimport ESelect from './extSelector.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nclass DCPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n /*       this.state = {\r\n            root: 'C',\r\n            accidental: '=',\r\n            mode: 'Aeolian',\r\n            tri_notes: [true, true, false],\r\n            ext_notes: [true, false, false, false]\r\n        }*/\r\n    }\r\n    /*triOnClick = (index) => {\r\n        let arr = this.state.tri_notes;\r\n        arr[index] = !arr[index];\r\n        this.setState({tri_notes: arr})\r\n        console.log(index);\r\n    }*/\r\n   /* extOnClick = (index) => {\r\n        let arr = this.state.ext_notes;\r\n        arr[index] = !arr[index];\r\n        this.setState({ext_notes: arr})\r\n        console.log(index);\r\n    }*/\r\n\r\n    render() {\r\n       /* const {\r\n            triOnClick,\r\n            extOnClick\r\n        } = this*/\r\n       /* const tri_list_items = this.state.tri_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {triOnClick.bind(this, index)}> <h6>{index * 2 + 1}</h6> </li>\r\n        });*/\r\n        /*const ext_list_items = this.state.ext_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {extOnClick.bind(this, index)}> <h6>{index * 2 + 7}</h6> </li>\r\n        });*/\r\n\r\n        return (\r\n            <div class='panel-wrap'>\r\n                <div id='theroot'>\r\n                    <h3>Root:</h3>\r\n                    <RSelect />\r\n                </div>\r\n                <div id='mode'>\r\n                    <h3>Mode:</h3>\r\n                    <MSelect />\r\n                </div>\r\n                <div id='triad'>\r\n                    <h3><span>Triad:</span></h3>\r\n                    <TSelect />\r\n                </div>\r\n                <div id='extensions'>\r\n                    <h3><span>Ext:</span></h3>\r\n                    <ESelect />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DCPanel;\r\n\r\n/*\r\n        <ul id='tri-list'>\r\n            <li id='one'>1</li>\r\n            <li id='three'>3</li>\r\n            <li id='five'>5</li>\r\n        </ul>\r\n*/\r\n\r\n/*\r\n        makeTriList = () => {\r\n            this.state.tri_notes.map(function(bool, index){\r\n                let class_list=\"\"\r\n                if (bool) {\r\n                    class_list += 'selected-note';\r\n                } \r\n                return <li \r\n                    className={class_list}\r\n                    label={index}\r\n                    onClick = {liOnClick}> {index * 2 + 1} </li>\r\n            });\r\n        }\r\n        makeExtList = () => {\r\n            this.state.ext_notes.map(function(bool, index){\r\n                let class_list=\"\"\r\n                if (bool) {\r\n                    class_list += 'selected-note';\r\n                } \r\n                return <li \r\n                    className={class_list}\r\n                    label={index}\r\n                    onClick = {liOnClick}> {index * 2 + 7} </li>\r\n            });\r\n        }\r\n        tri_list_items = makeTriList();\r\n        ext_list_items = makeExtList();\r\n*/","import {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\nimport {\r\n    general_chord,\r\n    general_note\r\n} from './generalChord.js';\r\n\r\nexport class note_instance {\r\n    constructor(fret_number, string_number) {\r\n        this.fret = fret_number;\r\n        this.string = string_number;\r\n    }\r\n}\r\nexport class chord_instance {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E];\r\n\r\n    }\r\n}\r\nlet temp_string = [E, F, '*', G, '*', A, '*', B, C, '*', D, '*' ];\r\nlet E_note = new general_note(E, NATURAL)\r\nlet A_note = new general_note(A, NATURAL)\r\nlet D_note = new general_note(D, NATURAL)\r\nlet G_note = new general_note(G, NATURAL)\r\nlet B_note = new general_note(B, NATURAL)\r\nlet TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\nexport class chord_finder {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E]; \r\n        this.active_strings = [true, false, true, true, true, false];\r\n        this.low_fret_bound = 2;\r\n        this.high_fret_bound = 7;\r\n        this.required_notes= [];\r\n        this.general_notes=[];\r\n    }\r\n    find_general_scale(general_chord){\r\n        let general_notes = [new general_note(general_chord.root, general_chord.accidental)];\r\n        let stepper = [2, 2, 1, 2, 2, 2, 1];\r\n        let mode = general_chord.mode;\r\n        \r\n        let step_start = 0\r\n        if (mode === DORIAN) {\r\n            step_start += 1;\r\n        } else if (mode === PHRYGIAN) {\r\n             step_start += 2;\r\n        } else if (mode === LYDIAN) {\r\n            step_start += 3;    \r\n        } else if (mode === MIXOLYDIAN) {\r\n            step_start += 4;    \r\n        } else if (mode === AEOLIAN) {\r\n            step_start += 5;    \r\n        } else if (mode === LOCRIAN) {\r\n            step_start += 6;    \r\n        }\r\n        let build_flat_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                //console.log(stepper[step_finder]);\r\n               // console.log(temp_string[index]);\r\n                if (temp_string[index] === '*') {\r\n                    if(index + 1 === temp_string.length) {\r\n                        top_7.push(new general_note(temp_string[0], FLAT));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index + 1], FLAT));\r\n                       // console.log('right');\r\n                    }\r\n                } else {\r\n                    //console.log('wrong');\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n                //console.log('\\n\\n****************');\r\n            }\r\n            return top_7; \r\n        }\r\n        let build_sharp_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                if (temp_string[index] == '*') {\r\n                    if(index - 1 < 0) {\r\n                        top_7.push(new general_note(temp_string[12], SHARP));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index-1], SHARP));\r\n                    }\r\n                } else {\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n            }\r\n            return top_7; \r\n        }\r\n        let start_fret = temp_string.indexOf(general_chord.root);\r\n        if (general_chord.accidental === FLAT) {\r\n            start_fret--;\r\n            if (start_fret < 0) {\r\n                start_fret = temp_string.length - 1;\r\n            }\r\n            general_notes = general_notes.concat(build_flat_scale(start_fret));\r\n            return(general_notes);\r\n\r\n        } else if (general_chord.accidental === SHARP) {\r\n            start_fret++;\r\n            if (start_fret >= temp_string.length){\r\n                start_fret = 0;\r\n                general_notes = general_notes.concat(build_sharp_scale(start_fret));\r\n                return(general_notes);\r\n            }\r\n        } else {\r\n            let flat_scale = general_notes.concat(build_flat_scale(start_fret));\r\n            let sharp_scale = general_notes.concat(build_sharp_scale(start_fret));\r\n            let flat_fail = false;\r\n            let flat_count = 0;\r\n            let previous_root = null;\r\n            for (let i = 0; i < flat_scale.length; i++) {\r\n                if (previous_root === flat_scale[i].root) {\r\n                    flat_fail = true;\r\n                }\r\n                if (flat_scale[i].accidental === FLAT) {\r\n                    flat_count++;\r\n                }\r\n                previous_root = flat_scale[i].root;\r\n            }\r\n            let sharp_fail = false;\r\n            let sharp_count = 0;\r\n            previous_root=null;\r\n            for (let i = 0; i < sharp_scale.length; i++) {\r\n                if (previous_root === sharp_scale[i].root){\r\n                    sharp_fail = true;\r\n                    //break;\r\n                }\r\n                if (sharp_scale[i].accidental === SHARP) {\r\n                    sharp_count++;\r\n                }\r\n                previous_root = sharp_scale[i].root;\r\n            }\r\n            if (sharp_fail) {\r\n                return flat_scale;\r\n            } else if (flat_fail) {\r\n                return sharp_scale;\r\n            } else {\r\n                if (sharp_count < flat_count) {\r\n                    return sharp_scale;\r\n                } else {\r\n                    return flat_scale;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    findChordNotes = (general_chord) => {\r\n        let the_scale = this.find_general_scale(general_chord);\r\n        let notes_in_chord = []\r\n        for(let i = 0; i < the_scale.length; i++) {\r\n            if(i === 0 || i === 2 || i === 5) {\r\n                if(general_chord.tri_notes[i/2]){\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            } else {\r\n                if (general_chord.ext_notes[i%6]) {\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            }\r\n        }\r\n        return notes_in_chord;\r\n    }\r\n    getFingerPositions = (chord_notes, tuning, h_fret_bound, l_fret_bound) => {\r\n        let tuning_temp_indexes = [];\r\n        for (let i = 0; i < tuning.length; i++) {\r\n            let start_fret = temp_string.indexOf(tuning[i].root);\r\n            if (tuning[i].accidental === FLAT) {\r\n                start_fret--;\r\n                if (start_fret < 0) {\r\n                    start_fret = temp_string.length - 1;\r\n                }\r\n                \r\n            } else if (general_chord.accidental === SHARP) {\r\n                start_fret++;\r\n                if (start_fret >= temp_string.length){\r\n                    start_fret = 0;\r\n                }\r\n            }\r\n            tuning_temp_indexes.push(start_fret);\r\n        }\r\n\r\n        let string_potentials = [];\r\n        for (let i = 0; i < tuning_temp_indexes.length; i++){\r\n            string_potentials.push([]);\r\n            for(let j = 0; j < h_fret_bound-l_fret_bound; j++) {\r\n                let temp_index = tuning_temp_indexes[i] + l_fret_bound + j;\r\n                if (temp_index >= temp_string.length) {\r\n                    temp_index = temp_index % temp_string.length;\r\n                }\r\n                //console.log(temp_index);\r\n                for(let k = 0; k < chord_notes.length; k++) {                    \r\n                    if (chord_notes[k].accidental === FLAT) {\r\n                        if (temp_string[temp_index + 1] === chord_notes[k].root) {\r\n                            string_potentials[i].push((temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length);\r\n                            //string_potentials[i].push();\r\n                        }\r\n                    } else if (chord_notes[k].accidental === SHARP) {\r\n                        if (temp_string[temp_index - 1] === chord_notes[k].root) {\r\n                            string_potentials[i].push((temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length);\r\n                          //  string_potentials[i].push();\r\n                        }\r\n                    } else {\r\n                        if(temp_string[temp_index] === chord_notes[k].root) {\r\n                            string_potentials[i].push((temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length);\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            string_potentials[i].push(null);\r\n            //console.log('/n****************************');\r\n        }\r\n        let arr = string_potentials;\r\n        let n = arr.length;\r\n        let indices = Array(n).fill(0);\r\n        let all_the_chords = [];\r\n\r\n        while(1) {\r\n            let new_chord = []\r\n            let lowest_fret = 1000;\r\n            let highest_fret = -1000;\r\n            for (let i = 0; i < n; i++) {\r\n                let val = arr[i][indices[i]];\r\n                if (val != 0 && val > highest_fret) {\r\n                    highest_fret = val;\r\n                }\r\n                if (val != 0 && val < lowest_fret) {\r\n                    lowest_fret = val;\r\n                } \r\n                new_chord.push(val);\r\n            }\r\n            if(highest_fret-lowest_fret < 5) {\r\n                all_the_chords.push(new_chord);\r\n            }\r\n            let next = n - 1;\r\n            while (next >= 0 && (indices[next] + 1 >= arr[next].length)) {\r\n                next--;\r\n            }\r\n            if (next < 0) {\r\n                break;\r\n            }\r\n            indices[next]++\r\n            for(let i = next + 1; i < n; i++) {\r\n                indices[i] = 0;\r\n            }\r\n            \r\n        }\r\n// https://www.geeksforgeeks.org/combinations-from-n-arrays-picking-one-element-from-each-array/\r\n\r\n        return all_the_chords;\r\n\r\n    }\r\n}\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\nimport {note_instance, chord_instance} from './classes/specificChord.js';\r\n\r\nclass ChordTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n        let notes = [\r\n            {'string': 1, 'fret': 3},\r\n            {'string': 3, 'fret': 4},\r\n            {'string': 4, 'fret': 4},\r\n            {'string': 5, 'fret': 3},\r\n        ]\r\n        let myChord = new chord_instance(); \r\n        let string_number = 6\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 5;\r\n        let fret_span =  100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (fret_span - 7) + '%'\r\n        let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n\r\n        let circle_radius = (string_span / 2.5);\r\n        let radius_str = circle_radius +'%';\r\n        let x_coord = string_span*1 + '%';\r\n        let y_coord = fret_span*5 - circle_radius + '%';\r\n        \r\n        console.log('x*************************')\r\n        console.log (x_coords);\r\n        console.log(x_coord);\r\n        console.log('y**********************')\r\n        console.log(y_coord);\r\n        console.log(y_coords);\r\n\r\n        return(\r\n                <svg style={{width:'100%', height:'100%'}}>\r\n                    <line x1={fret_x1} y1={y_coords[0]} x2={fret_x2} y2={y_coords[0]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[1]} x2={fret_x2} y2={y_coords[1]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[2]} x2={fret_x2} y2={y_coords[2]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[3]} x2={fret_x2} y2={y_coords[3]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[4]} x2={fret_x2} y2={y_coords[4]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[5]} x2={fret_x2} y2={y_coords[5]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    \r\n                    <line x1={x_coords[5]} y1='0%' x2={x_coords[5]} y2='100%' style={{stroke: 'white', width: '10'}}></line>\r\n                    <line x1={x_coords[4]} y1='0%' x2={x_coords[4]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[3]} y1='0%' x2={x_coords[3]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[2]} y1='0%' x2={x_coords[2]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[1]} y1='0%' x2={x_coords[1]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[0]} y1='0%' x2={x_coords[0]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    {notes.map(note => {\r\n                        let x_coord = string_span*note.string +'%';\r\n                        let y_coord = fret_span*note.fret-circle_radius + '%';\r\n                        return <circle cx= {x_coord} cy={y_coord} r={radius_str} fill='yellow'></circle>\r\n                    })}\r\n\r\n                </svg>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChordTab;","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport ChordTab from './chordTab.js';\r\nimport {general_chord, general_note} from './classes/generalChord.js';\r\nimport {chord_finder} from './classes/specificChord.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from './constants/music.js';\r\n\r\nclass ChordViz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n        let find_chords = new chord_finder();\r\n        let the_chord = new general_chord();\r\n        the_chord.root=B;\r\n        the_chord.accidental=FLAT;\r\n        let a_chord =  new general_chord();\r\n        let d_chord = new general_chord();\r\n        d_chord.root = C;\r\n        d_chord.mode = MIXOLYDIAN;\r\n\r\n        /*console.log('**************************');\r\n        console.log(\r\n            find_chords.find_general_scale(the_chord)\r\n        );\r\n        console.log(find_chords.findChordNotes(the_chord));\r\n        console.log('**************************');\r\n        console.log(\r\n            find_chords.find_general_scale(a_chord)\r\n        );    \r\n        console.log(find_chords.findChordNotes(a_chord));\r\n        console.log('**************************');\r\n        console.log(\r\n            find_chords.find_general_scale(d_chord)\r\n        );*/\r\n        let chord_notes = find_chords.findChordNotes(d_chord);\r\n        console.log(chord_notes);\r\n        \r\n        let E_note = new general_note(E, NATURAL);\r\n        let A_note = new general_note(A, NATURAL);\r\n        let D_note = new general_note(D, NATURAL);\r\n        let G_note = new general_note(G, NATURAL);\r\n        let B_note = new general_note(B, NATURAL);\r\n        let TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\n        \r\n        let spectate = find_chords.getFingerPositions(chord_notes, TUNING, 9, 2);\r\n        console.log(spectate);\r\n        /*let string_number = 6;\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 5;\r\n        let fret_span =  100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (fret_span - 7) + '%'\r\n        let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n\r\n        let circle_radius = (string_span / 2.1);\r\n        let radius_str = circle_radius +'%';\r\n        let x_coord = string_span*3 + '%'string_span * 6 + '%';\r\n        let y_coord = fret_span*5 + '%';\r\n        \r\n        console.log('x*************************')\r\n        console.log (x_coords);\r\n        console.log(x_coord);\r\n        console.log('y**********************')\r\n        console.log(y_coord);\r\n        console.log(y_coords);*/\r\n\r\n        return(\r\n                <svg id='the-svg' style={{margin: 'auto', width:'70%', height:'70%', border: '2px solid red', viewbox: '0 0 70% 70%'}}>\r\n                    <ChordTab />\r\n                </svg>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChordViz;","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Header from './Header.js';\nimport Cards, {Card1, Card2, Card3} from './Cards.js';\nimport Tabs from './Tabs.js';\nimport Selector from './Selector.js';\nimport DCPanel from './defineChordPanel.js';\nimport ChordViz from './chordViz.js';\nimport './App.css';\n\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nlet letter_options = letters.map(opt => ({label: opt, value: opt}));\n\nclass App extends Component {\n  render() {\n    console.log(window.innerHeight);\n    return (\n      <div className=\"Wrapper\">\n        <Header />\n        <div id='topCardHolder'>\n        </div>\n        <div id=\"chordBackdrop\">\n          <ChordViz />\n        </div>\n        <div id=\"slide\">\n          <div id='spacer'></div>\n          <div id='triHolder'>\n            <div id='triangle'></div>\n          </div>\n          <div id='description'>\n            <Selector />\n            <Tabs>\n              <div id='define' label='Define Chord'>\n                <DCPanel />\n              </div>\n              <div id='set' label='Set Note'>\n                <input></input>\n                <button>Submit</button>\n              </div>\n              <div id='search' label='Search Space'>\n                <div>\n                  <label>Low Fret: </label>\n                  <input></input>\n                </div>\n                <div>\n                  <label>High Fret: </label>\n                  <input></input>\n                </div>\n                <button>Submit</button>\n              </div> \n            </Tabs>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n/*\n          <div id='botCardHolder'>\n            <Card2 />\n          </div>\n*/\n/*\n<div id='panelWrap'>\n<div id='panel1'>\n  <div id='root'></div>\n  <div id='mode'></div>\n  <div id='triad'></div>\n  <div id='extensions'></div>\n</div>\n<div id='panel2' className='hide'></div>\n<div id='panel3' className='hide'></div>\n</div>\n<ul id='panelNav'>\n<li><h6>Chord<br/>Description</h6></li>\n<li><h6>Set<br/>Note</h6></li>\n<li><h6>Search<br/>Space</h6></li>\n</ul>\n*/\n\n/*\n                  <Select \n                    options={letter_options}\n                    onChange={opt => console.log(opt.value)}\n                    className={'root'}\n                    classNamePrefix={'rooter'}\n                    styles={\n                      {option: (state) => ({\n                        borderBottom: '2px solid red',\n                        height: '50%',\n                        color: 'black',\n                      }),\n                      valueContainer:(state) => ({\n                        overflow: 'scroll',\n                      })\n\n                    }\n                    }\n\n                  /> */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/index.js';\nimport { Provider } from 'react-redux';\n/*import ADD_CHORD from \"./actionTypes/index\";*/\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App /> \n    </Provider>,\n    document.getElementById('root')\n    \n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}