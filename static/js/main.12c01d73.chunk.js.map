{"version":3,"sources":["Header.js","constants/actionTypes.js","constants/music.js","classes/generalChord.js","classes/specificChord.js","reducers/index.js","store/index.js","Cards.js","actions/index.js","Tab.js","Tabs.js","Selector.js","rootSelector.js","modeSelector.js","triSelector.js","extSelector.js","chordViz.js","defineChordPanel.js","chordTab.js","chordBackdrop.js","boardViz.js","boardBackdrop.js","App.js","serviceWorker.js","index.js"],"names":["Component","CHANGE_PROGRESSION","CHANGE_ACTIVE_INDEX","CHANGE_ROOT","CHANGE_ACCIDENTAL","CHANGE_MODE","CHANGE_TRI_NOTES","CHANGE_EXT_NOTES","CHANGE_DIAGRAM_INDEX","CHANGE_SELECTED_CHORD","A","B","D","E","G","SHARP","NATURAL","FLAT","IONIAN","general_note","the_root","the_accidental","Object","classCallCheck","this","root","accidental","general_chord","mode","tri_notes","ext_notes","createClass","key","value","string_name","k","i","generalCopy","clone","old","temp_string","E_note","chord_finder","_this","findChordNotes","the_scale","find_general_scale","notes_in_chord","length","Math","floor","push","getFingerPositions","tuning","h_fret_bound","l_fret_bound","high_fret_bound","low_fret_bound","chord_notes","tuning_temp_indexes","start_fret","indexOf","string_potentials","j","temp_index","the_note","the_index","index","note","arr","n","indices","Array","fill","all_the_chords","new_chord","lowest_fret","highest_fret","val","next","active_strings","required_notes","general_notes","stepper","step_start","build_flat_scale","top_7","step_finder","build_sharp_scale","concat","flat_scale","sharp_scale","flat_fail","flat_count","previous_root","sharp_fail","sharp_count","TUNING","chord1","chord2","chord3","chord4","find_chords","specific_arr1","scale1","specific_arr2","console","log","scale2","specific_arr3","scale3","initialState","active_index","chords","specific_chords","selected_indices","visible_diagram_indices","scales","colors","theReducer","state","arguments","undefined","action","type","payload","new_spec_arr","new_scale","new_chords","slice","new_specific_chords","new_visible_diagram_indices","new_scales","splice","assign","new_index","copy_me","the_clone","new_arr","specififc_chords","visible_diagrams","diagram_index","selected_chords","visible_index","store","createStore","connected_card1","props","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","id","className","map","color","style","background-color","connected_card2","optionClicker","setState","showMenu","optionSelector","string","dispatch","setChord","cp_options","_this$props","test","cp_button","onClick","bind","Tab","connect","label","_this$props2","activeTab","label_arr","split","connected_Selector","handleScroll","assertThisInitialized","el","document","getElementById","scrollOffset","scrollLeft","itemWidth","offsetWidth","onScroll","child","getNameAsString","connected_RSelect","rootClicker","showRMenu","rootSelector","letter","accClicker","showAMenu","accSelector","symbol","r","_this$state","RSelect","connected_MSelect","modeClicker","modeSelector","MSelect","connected_TSelect","triItemOnClick","tri_list_items","bool","class_list","TSelect","connected_ESelect","extItemOnClick","ext_list_items","ESelect","connected_ChordViz","makeSVG","notes","scale","string_number","string_span","x_coords","y_coords","fret_number","chord_span","fret_x2","circle_radius","radius_str","hi_fret","lo_fret","diagram_base","chord_shift","shifted_notes","class","margin","width","height","y_coord","x1","y1","x2","y2","stroke","x","y","x_coord","x_center","y_center","cx","cy","changeDiagramIndex","selected_chord_index","ChordViz","connected_ChordBackdrop","specific_chords_length","visible_diagram_index","left_arrow","right_arrow","chordViz","ChordBackdrop","connected_BoardViz","the_chord","BoardViz","connected_BoardBackdrop","boardViz","BoardBackdrop","App","opt","viewClicker","view_progression","rotation","scrollTop","scrollHeight","clientHeight","transform","window","screen","orientation","lock","triRotate","boardBackdrop","chordBackdrop","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12c01d73.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            view_progression: false,\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <h1>Chordage</h1>\r\n                <div id='view-progression'>\r\n                    <h5 id='view-text'>View Progression</h5>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\nexport default Header;","export const CHANGE_PROGRESSION = 'CHANGE_PROGRESSION';\r\nexport const CHANGE_ACTIVE_INDEX = 'CHANGE_ACTIVE_INDEX';\r\nexport const CHANGE_ROOT = 'CHANGE_ROOT';\r\nexport const CHANGE_ACCIDENTAL = 'CHANGE_ACCIDENTAL';\r\nexport const CHANGE_MODE = 'CHANGE_MODE';\r\nexport const CHANGE_TRI_NOTES = 'CHANGE_TRI_NOTES';\r\nexport const CHANGE_EXT_NOTES = 'CHANGE_EXT_NOTES';\r\nexport const CHANGE_DIAGRAM_INDEX = 'CHANGE_DIAGRAM_INDEX';\r\nexport const CHANGE_SELECTED_CHORD = 'CHANGE_SELECTED_CHORDS';\r\n","/* Notes ******************************/\r\nexport const A = 'A';\r\nexport const B = 'B';\r\nexport const C = 'C';\r\nexport const D = 'D';\r\nexport const E = 'E';\r\nexport const F = 'F';\r\nexport const G = 'G';\r\n\r\n/* Accidentals *************************/\r\nexport const SHARP = '\\u266F';\r\nexport const NATURAL = '\\u266E';\r\nexport const FLAT = '\\u266D';\r\n\r\n/* Modes *******************************/\r\nexport const IONIAN = 'Ionian';\r\nexport const DORIAN = 'Dorian';\r\nexport const PHRYGIAN = 'Phrygian';\r\nexport const LYDIAN = 'Lydian';\r\nexport const MIXOLYDIAN = 'Mixolydian';\r\nexport const AEOLIAN = 'Aeolian';\r\nexport const LOCRIAN = 'Locrian';","import {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\n\r\nexport class general_note {\r\n    constructor(the_root, the_accidental) {\r\n        this.root = the_root;\r\n        this.accidental = the_accidental;\r\n    }\r\n}\r\n\r\nexport class general_chord {\r\n    constructor() {\r\n        this.root = A;\r\n        this.accidental = NATURAL \r\n        this.mode = IONIAN;\r\n        this.tri_notes = [true, true, true];\r\n        this.ext_notes = [false, false, false, false];\r\n    }\r\n    getNameAsString() {\r\n        let string_name = this.root\r\n        if (this.accidental !== NATURAL) {\r\n            string_name += this.accidental;\r\n        }\r\n        if (this.mode === IONIAN ||\r\n            this.mode === LYDIAN) {\r\n                string_name += 'maj';\r\n        } else if (this.mode === MIXOLYDIAN) {\r\n            string_name += 'dom';\r\n        } else if (this.mode === LOCRIAN) {\r\n            string_name += 'dim';\r\n        }\r\n        else {\r\n            string_name += 'min'\r\n        }\r\n        let k = 0;\r\n        for (let i = 7; i <= 13; i += 2) {\r\n            if (this.ext_notes[k]) {\r\n                string_name = string_name + ' ' + i;\r\n            }\r\n            k++;\r\n        }\r\n        return string_name;\r\n    }\r\n}\r\nexport function generalCopy(clone, old) {\r\n    clone.root = old.root;\r\n    clone.accidental = old.accidental;\r\n    clone.mode = old.mode;\r\n    clone.tri_notes = old.tri_notes;\r\n    clone.ext_notes = old.ext_notes;\r\n}","// Copyright 2019 Ross Hall \r\n\r\nimport {\r\n    A,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F,\r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    IONIAN,\r\n    DORIAN,\r\n    PHRYGIAN,\r\n    LYDIAN,\r\n    MIXOLYDIAN,\r\n    AEOLIAN,\r\n    LOCRIAN,\r\n} from '../constants/music'\r\nimport {\r\n    general_chord,\r\n    general_note\r\n} from './generalChord.js';\r\n\r\nexport class note_instance {\r\n    constructor(fret_number, string_number) {\r\n        this.fret = fret_number;\r\n        this.string = string_number;\r\n    }\r\n}\r\nexport class chord_instance {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E];\r\n\r\n    }\r\n}\r\nlet temp_string = [E, F, '*', G, '*', A, '*', B, C, '*', D, '*' ];\r\nlet E_note = new general_note(E, NATURAL)\r\nlet A_note = new general_note(A, NATURAL)\r\nlet D_note = new general_note(D, NATURAL)\r\nlet G_note = new general_note(G, NATURAL)\r\nlet B_note = new general_note(B, NATURAL)\r\nlet TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\nexport class chord_finder {\r\n    constructor() {\r\n        this.tuning=[E, A, D, G, B, E]; \r\n        this.active_strings = [true, false, true, true, true, false];\r\n        this.low_fret_bound = 3;\r\n        this.high_fret_bound = 7;\r\n        this.required_notes= [];\r\n        this.general_notes=[];\r\n    }\r\n    find_general_scale(general_chord){\r\n        let general_notes = [new general_note(general_chord.root, general_chord.accidental)];\r\n        let stepper = [2, 2, 1, 2, 2, 2, 1]; // whole tone or halftone step orderings\r\n        let mode = general_chord.mode;\r\n        \r\n        let step_start = 0\r\n        if (mode === DORIAN) {\r\n            step_start += 1;\r\n        } else if (mode === PHRYGIAN) {\r\n             step_start += 2;\r\n        } else if (mode === LYDIAN) {\r\n            step_start += 3;    \r\n        } else if (mode === MIXOLYDIAN) {\r\n            step_start += 4;    \r\n        } else if (mode === AEOLIAN) {\r\n            step_start += 5;    \r\n        } else if (mode === LOCRIAN) {\r\n            step_start += 6;    \r\n        }\r\n        let build_flat_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                if (temp_string[index] === '*') {\r\n                    if(index + 1 === temp_string.length) {\r\n                        top_7.push(new general_note(temp_string[0], FLAT));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index + 1], FLAT));\r\n\r\n                    }\r\n                } else {\r\n\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n            }\r\n            return top_7; \r\n        }\r\n        let build_sharp_scale = (index) => {\r\n            let top_7 = []\r\n            for (let i = 0; i < 7; i++) {\r\n                let step_finder = step_start + i;\r\n                if (step_finder >= stepper.length) {\r\n                    step_finder = step_finder % stepper.length;\r\n                }\r\n                index += stepper[step_finder];\r\n                if (index >= temp_string.length) {\r\n                    index = index % temp_string.length;\r\n                }\r\n                if (temp_string[index] == '*') {\r\n                    if(index - 1 < 0) {\r\n                        top_7.push(new general_note(temp_string[12], SHARP));\r\n                    } else {\r\n                        top_7.push(new general_note(temp_string[index-1], SHARP));\r\n                    }\r\n                } else {\r\n                    top_7.push(new general_note(temp_string[index], NATURAL));\r\n                }\r\n            }\r\n            return top_7; \r\n        }\r\n        let start_fret = temp_string.indexOf(general_chord.root);\r\n        if (general_chord.accidental === FLAT) {\r\n            start_fret--;\r\n            if (start_fret < 0) {\r\n                start_fret = temp_string.length - 1;\r\n            }\r\n            general_notes = general_notes.concat(build_flat_scale(start_fret));\r\n            return(general_notes);\r\n\r\n        } else if (general_chord.accidental === SHARP) {\r\n            start_fret++;\r\n            if (start_fret >= temp_string.length){\r\n                start_fret = 0;\r\n            }\r\n            general_notes = general_notes.concat(build_sharp_scale(start_fret));\r\n            return(general_notes);\r\n        } else {\r\n            let flat_scale = general_notes.concat(build_flat_scale(start_fret));\r\n            let sharp_scale = general_notes.concat(build_sharp_scale(start_fret));\r\n            let flat_fail = false;\r\n            let flat_count = 0;\r\n            let previous_root = null;\r\n            for (let i = 0; i < flat_scale.length; i++) {\r\n                if (previous_root === flat_scale[i].root) {\r\n                    flat_fail = true;\r\n                }\r\n                if (flat_scale[i].accidental === FLAT) {\r\n                    flat_count++;\r\n                }\r\n                previous_root = flat_scale[i].root;\r\n            }\r\n            let sharp_fail = false;\r\n            let sharp_count = 0;\r\n            previous_root=null;\r\n            for (let i = 0; i < sharp_scale.length; i++) {\r\n                if (previous_root === sharp_scale[i].root){\r\n                    sharp_fail = true;\r\n                    //break;\r\n                }\r\n                if (sharp_scale[i].accidental === SHARP) {\r\n                    sharp_count++;\r\n                }\r\n                previous_root = sharp_scale[i].root;\r\n            }\r\n            if (sharp_fail) {\r\n                return flat_scale;\r\n            } else if (flat_fail) {\r\n                return sharp_scale;\r\n            } else {\r\n                if (sharp_count < flat_count) {\r\n                    return sharp_scale;\r\n                } else {\r\n                    return flat_scale;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    findChordNotes = (general_chord) => {\r\n        let the_scale = this.find_general_scale(general_chord);\r\n        let notes_in_chord = []\r\n        for(let i = 0; i < the_scale.length; i++) {\r\n            if(i === 0 || i === 2 || i === 4) {\r\n                if(general_chord.tri_notes[Math.floor(i/2)]){\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            } else {\r\n                if (general_chord.ext_notes[i%6]) {\r\n                    notes_in_chord.push(the_scale[i]);\r\n                }\r\n            }\r\n        }\r\n        //console.log(notes_in_chord);\r\n        return notes_in_chord;\r\n    }\r\n    getFingerPositions = (general_chord, tuning, h_fret_bound, l_fret_bound) => {\r\n        this.high_fret_bound = h_fret_bound;\r\n        this.low_fret_bound = l_fret_bound;\r\n        let chord_notes = this.findChordNotes(general_chord);\r\n        let tuning_temp_indexes = [];\r\n        for (let i = 0; i < tuning.length; i++) {\r\n            let start_fret = temp_string.indexOf(tuning[i].root);\r\n            if (tuning[i].accidental === FLAT) {\r\n                start_fret--;\r\n                if (start_fret < 0) {\r\n                    start_fret = temp_string.length - 1;\r\n                } \r\n            } else if (general_chord.accidental === SHARP) {\r\n                start_fret++;\r\n                if (start_fret >= temp_string.length){\r\n                    start_fret = 0;\r\n                }\r\n            }\r\n            tuning_temp_indexes.push(start_fret);\r\n        }\r\n\r\n\r\n        let string_potentials = [];\r\n        for (let i = 0; i < tuning_temp_indexes.length; i++){\r\n            string_potentials.push([]);\r\n            for(let j = 0; j <= h_fret_bound-l_fret_bound; j++) { // Not sure why - 1 is needed here to \r\n                let temp_index = tuning_temp_indexes[i] + l_fret_bound + j; // the correct upper bound\r\n                if (temp_index >= temp_string.length) {\r\n                    temp_index = temp_index % temp_string.length;\r\n                }\r\n                for(let k = 0; k < chord_notes.length; k++) {                 \r\n                    if (chord_notes[k].accidental === FLAT) {\r\n                        if (temp_string[temp_index + 1] === chord_notes[k].root) {\r\n                            let the_note = new general_note(chord_notes[k].root, chord_notes[k].accidental);\r\n                            let the_index = (temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length;\r\n                            string_potentials[i].push({index:the_index, note:the_note});\r\n                        }\r\n                    } else if (chord_notes[k].accidental === SHARP) {\r\n                        if (temp_string[temp_index - 1] === chord_notes[k].root) {\r\n                            let the_note = new general_note(chord_notes[k].root, chord_notes[k].accidental);\r\n                            let the_index = (temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length;\r\n                            string_potentials[i].push({index:the_index, note:the_note});\r\n                        }\r\n                    } else {\r\n                        if(temp_string[temp_index] === chord_notes[k].root) {\r\n                            let the_note = new general_note(chord_notes[k].root, chord_notes[k].accidental);\r\n                            let the_index=(temp_index + temp_string.length - tuning_temp_indexes[i]) % temp_string.length;\r\n                            string_potentials[i].push({index:the_index, note:the_note});\r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            string_potentials[i].push(null);\r\n        }\r\n        //console.log(string_potentials);\r\n\r\n        let arr = string_potentials;\r\n        let n = arr.length;\r\n        let indices = Array(n).fill(0);\r\n        let all_the_chords = [];\r\n\r\n        while(1) {\r\n            let new_chord = []\r\n            let lowest_fret = 1000;\r\n            let highest_fret = -1000;\r\n            let val;\r\n            for (let i = 0; i < n; i++) {\r\n                val = arr[i][indices[i]];\r\n                /* 0s and nulls not included in determining how many frets a chord spans */\r\n                if (val != 0 && val !== null && val > highest_fret) {\r\n                    highest_fret = val;\r\n                }\r\n                if (val != 0 && val !== null && val < lowest_fret) {\r\n                    lowest_fret = val;\r\n                } \r\n                new_chord.push(val);\r\n            }\r\n            if(highest_fret-lowest_fret < 5) {\r\n                all_the_chords.push(new_chord);\r\n            }\r\n            let next = n - 1;\r\n            while (next >= 0 && (indices[next] + 1 >= arr[next].length)) {\r\n                next--;\r\n            }\r\n            if (next < 0) {\r\n                break;\r\n            }\r\n            indices[next]++\r\n            for(let i = next + 1; i < n; i++) {\r\n                indices[i] = 0;\r\n            }\r\n            \r\n        }\r\n// https://www.geeksforgeeks.org/combinations-from-n-arrays-picking-one-element-from-each-array/\r\n\r\n        return all_the_chords;\r\n\r\n    }\r\n}\r\n\r\n\r\n","// Copyright 2019 Ross Hall\r\n\r\n/* reducers/index.js holds the initial state \r\nand the logic for each type of state change\r\nthat could occur*/\r\n\r\nimport { \r\n    CHANGE_PROGRESSION,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT, \r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES,\r\n    CHANGE_DIAGRAM_INDEX,\r\n    CHANGE_SELECTED_CHORD\r\n} from \"../constants/actionTypes.js\";\r\nimport { general_chord, generalCopy, general_note } from '../classes/generalChord.js';\r\nimport {chord_finder} from '../classes/specificChord.js';\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from '../constants/music.js';\r\n\r\nlet E_note = new general_note(E, NATURAL);\r\nlet A_note = new general_note(A, NATURAL);\r\nlet D_note = new general_note(D, NATURAL);\r\nlet G_note = new general_note(G, NATURAL);\r\nlet B_note = new general_note(B, NATURAL);\r\nlet TUNING = [E_note, A_note, D_note, G_note, B_note, E_note];\r\n\r\n\r\nlet chord1 = new general_chord;\r\nlet chord2 = new general_chord;\r\nlet chord3 = new general_chord;\r\nlet chord4 = new general_chord;\r\nchord2.root = 'B';\r\nchord3.root = 'C';\r\nchord4.root = 'D';\r\n\r\nlet find_chords = new chord_finder();\r\n\r\n//console.log('**************************************************************');\r\nlet specific_arr1 = find_chords.getFingerPositions(chord1, TUNING, 3, 1);\r\nlet scale1 = find_chords.find_general_scale(chord1);\r\n//console.log(scale1);\r\n//console.log('**************************************************************');\r\n\r\nlet specific_arr2 = find_chords.getFingerPositions(chord2, TUNING, 8, 5);\r\nconsole.log(specific_arr2);\r\nlet scale2 = find_chords.find_general_scale(chord2);\r\n\r\n\r\nlet specific_arr3 = find_chords.getFingerPositions(chord3, TUNING, 10, 5);\r\nlet scale3 = find_chords.find_general_scale(chord3);\r\n\r\n\r\nlet specific_arr4 = find_chords.getFingerPositions(chord4, TUNING, 12, 7);\r\nlet scale4 = find_chords.find_general_scale(chord4);\r\n\r\n\r\nconst initialState = {\r\n    active_index: 0,\r\n    chords: [chord1, chord2, chord3, chord4],\r\n    specific_chords: [ specific_arr1, specific_arr2, specific_arr3, specific_arr4 ],\r\n    selected_indices: [0,0,0,0],\r\n    visible_diagram_indices: [0, 0, 0, 0],\r\n    scales: [scale1, scale2, scale3, scale4],\r\n    colors: ['yellow', 'magenta', 'cyan', 'orange', 'red', 'blue', 'lightgreen']\r\n};\r\n\r\nfunction theReducer(state = initialState, action) {\r\n    /***********************************************************************************\r\n     * Add Chord\r\n     **********************************************************************************/\r\n    if (action.type === CHANGE_PROGRESSION) {\r\n        if(action.payload === 'DELETE') {\r\n            if (state.chords.length > 1) { \r\n                let new_chords = state.chords.slice();\r\n                let new_specific_chords = state.specific_chords.slice();\r\n                let new_visible_diagram_indices = state.visible_diagram_indices.slice();\r\n                let new_scales = state.scales.slice();\r\n\r\n                new_chords.splice(state.active_index, 1);\r\n                new_specific_chords.splice(state.active_index, 1);\r\n                new_visible_diagram_indices.splice(state.active_index, 1);\r\n                new_scales.splice(state.active_index, 1);\r\n                let new_index;\r\n                if (state.active_index === state.chords.length - 1) {\r\n                    new_index = state.active_index - 1;\r\n                } else {\r\n                    new_index = state.active_index;\r\n                }\r\n                return Object.assign({}, state, {\r\n                    active_index: new_index,\r\n                    chords: new_chords,\r\n                    specific_chords: new_specific_chords,\r\n                    visible_diagram_indices: new_visible_diagram_indices,\r\n                    scales: new_scales,\r\n                });\r\n            }\r\n        } else if (action.payload === 'BEFORE') {\r\n            let new_chord = new general_chord;\r\n            let new_spec_arr = find_chords.getFingerPositions(new_chord, TUNING, 9, 3);\r\n            let new_scale = find_chords.find_general_scale(new_chord);\r\n\r\n            let new_chords = state.chords.slice();\r\n            let new_specific_chords = state.specific_chords.slice();\r\n            let new_visible_diagram_indices = state.visible_diagram_indices.slice();\r\n            let new_scales = state.scales.slice();\r\n\r\n            new_chords.splice(state.active_index, 0, new_chord);\r\n            new_specific_chords.splice(state.active_index, 0, new_spec_arr);\r\n            new_visible_diagram_indices.splice(state.active_index, 0, 0);\r\n            new_scales.splice(state.active_index, 0, new_scale);\r\n\r\n            return Object.assign({}, state, {\r\n                chords: new_chords,\r\n                specific_chords: new_specific_chords,\r\n                visible_diagram_indices: new_visible_diagram_indices,\r\n                scales: new_scales\r\n            });\r\n        } else { // insert after\r\n            let new_chord = new general_chord;\r\n            let new_spec_arr = find_chords.getFingerPositions(new_chord, TUNING, 9, 3);\r\n            let new_scale = find_chords.find_general_scale(new_chord);\r\n\r\n            let new_chords = state.chords.slice();\r\n            let new_specific_chords = state.specific_chords.slice();\r\n            let new_visible_diagram_indices = state.visible_diagram_indices.slice();\r\n            let new_scales = state.scales.slice();\r\n\r\n            new_chords.splice(state.active_index + 1, 0, new_chord);\r\n            new_specific_chords.splice(state.active_index + 1, 0, new_spec_arr);\r\n            new_visible_diagram_indices.splice(state.active_index + 1, 0, 0);\r\n            new_scales.splice(state.active_index + 1, 0, new_scale);\r\n\r\n            return Object.assign({}, state, {\r\n                chords: new_chords,\r\n                specific_chords: new_specific_chords,\r\n                visible_diagram_indices: new_visible_diagram_indices,\r\n                scales: new_scales\r\n            });\r\n        }\r\n\r\n\r\n    /***********************************************************************************\r\n     * Change Active Index\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ACTIVE_INDEX) {\r\n        return Object.assign({}, state, {\r\n            active_index: action.payload,\r\n        });\r\n    /***********************************************************************************\r\n     * Change Root\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ROOT) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.root = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n        \r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales;\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales\r\n        });\r\n    /***********************************************************************************\r\n     * Change accidental\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_ACCIDENTAL) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.accidental = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales;\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales\r\n        });\r\n    /***********************************************************************************\r\n     * Change Mode\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_MODE){\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.mode = action.payload;\r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales;\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specififc_chords: new_spec_arr,\r\n            scales: new_scales \r\n        });\r\n    /***********************************************************************************\r\n     * Change Tri Notes\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_TRI_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.tri_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales;\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales \r\n        });\r\n    /***********************************************************************************\r\n     * Change Ext Notes\r\n     **********************************************************************************/\r\n    } else if (action.type === CHANGE_EXT_NOTES) {\r\n        let copy_me = state.chords[state.active_index];\r\n        let the_clone = new general_chord;\r\n        generalCopy(the_clone, copy_me);\r\n        the_clone.ext_notes = action.payload;\r\n        \r\n\r\n        let new_arr = state.chords.slice();\r\n        new_arr[state.active_index] = the_clone;\r\n\r\n        let new_specific_chords = find_chords.getFingerPositions(the_clone, TUNING, 9, 3);\r\n        let new_spec_arr = state.specific_chords.slice();\r\n        new_spec_arr[state.active_index] = new_specific_chords;\r\n\r\n        let new_scale = find_chords.find_general_scale(the_clone);\r\n        let new_scales = state.scales;\r\n        new_scales[state.active_index] = new_scale;\r\n\r\n        return Object.assign({}, state, {\r\n            chords: new_arr,\r\n            specific_chords: new_spec_arr,\r\n            scales: new_scales \r\n        });\r\n    /*************************************************************************************\r\n     * Change  Visible Diagram Index\r\n     * **********************************************************************************/\r\n    } else if (action.type === CHANGE_DIAGRAM_INDEX) {\r\n        let visible_diagrams = state.visible_diagram_indices.slice();\r\n        visible_diagrams[action.payload.active_index] = action.payload.diagram_index;\r\n        return Object.assign({}, state, {\r\n            visible_diagram_indices: visible_diagrams,\r\n        });\r\n    } else if (action.type === CHANGE_SELECTED_CHORD) {\r\n        let selected_chords = state.selected_indices.slice();\r\n        selected_chords[action.payload.active_index] = action.payload.visible_index;\r\n        console.log('SELECT');\r\n        console.log(selected_chords);\r\n        return Object.assign({}, state, {\r\n            selected_indices: selected_chords,\r\n        });\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default theReducer;","import { createStore } from \"redux\";\r\nimport theReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(theReducer);\r\nexport default store;","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeProgression,\r\n    changeSelectedChord\r\n\r\n} from './actions/index.js';\r\n\r\n\r\nconst mapStateToPropsC1 = state => {\r\n    return {\r\n        colors: state.colors,\r\n    }\r\n}\r\nconst mapStateToPropsC2 = state => {\r\n    return {\r\n        active_index: state.active_index,\r\n        visible_index: state.visible_diagram_indices[state.active_index],  \r\n        test: state.visible_diagram_indices\r\n    }\r\n}\r\n\r\nclass connected_card1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                colors\r\n            },\r\n        } = this;\r\n        let color_index = <ul id='color-index'></ul>\r\n\r\n        return (\r\n            <div id=\"card1\" className=\"card\">\r\n                <ul id='color-index'>\r\n                    {colors.map((color, index) => {\r\n                        return <li style={{'background-color':color}}><h6>{index+1}<h6></h6></h6></li>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nclass connected_card2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showMenu: false,\r\n        }\r\n    }\r\n    optionClicker = () => {\r\n        this.setState({showMenu: true});\r\n    }\r\n    optionSelector = (string) => {\r\n        this.setState({\r\n            showMenu: false,\r\n        });\r\n        store.dispatch(changeProgression(string))\r\n    }\r\n    setChord = (active_index, visible_index) => {\r\n        store.dispatch(changeSelectedChord(active_index, visible_index));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                active_index,\r\n                visible_index,\r\n                test\r\n            },\r\n            state: {\r\n                showMenu,\r\n            },\r\n            optionClicker,\r\n            optionSelector,\r\n            setChord,\r\n        } = this;\r\n        let cp_options;\r\n        let cp_button =\r\n            <div id='change-progression' onClick={optionClicker}>\r\n                <h3>Change Progression</h3>\r\n            </div>;\r\n        if (showMenu) {\r\n            cp_options =                 \r\n            <ul id='option-menu'>\r\n                <li onClick={optionSelector.bind(this, \"BEFORE\")}><h6>Insert Before</h6></li>\r\n                <li onClick={optionSelector.bind(this, \"AFTER\")}><h6>Insert After</h6></li>\r\n                <li onClick={optionSelector.bind(this, \"DELETE\")}><h6>Delete</h6></li>\r\n            </ul>;\r\n        }\r\n\r\n        return (\r\n            <div id=\"card2\" className=\"card\">\r\n                {cp_button}\r\n                <div>\r\n                    <h3 onClick={setChord.bind(this, active_index, visible_index)}>Set Chord</h3>\r\n                </div>\r\n                {cp_options}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nclass Card3 extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"card3\" className=\"card\"></div>\r\n        );\r\n    }\r\n}\r\nconst Card1 = connect(mapStateToPropsC1)(connected_card1); \r\nconst Card2 = connect(mapStateToPropsC2)(connected_card2);\r\nexport {\r\n    Card1,\r\n    Card2,\r\n    Card3\r\n}","import { \r\n    CHANGE_PROGRESSION,\r\n    CHANGE_ACTIVE_INDEX,\r\n    CHANGE_ROOT,\r\n    CHANGE_ACCIDENTAL,\r\n    CHANGE_MODE,\r\n    CHANGE_TRI_NOTES,\r\n    CHANGE_EXT_NOTES,\r\n    CHANGE_DIAGRAM_INDEX,\r\n    CHANGE_SELECTED_CHORD\r\n } from \"../constants/actionTypes.js\";\r\n\r\nexport function changeProgression(the_stuff) {\r\n    return { \r\n        type: CHANGE_PROGRESSION, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeActiveIndex(the_stuff) {\r\n    return { \r\n        type: CHANGE_ACTIVE_INDEX, \r\n        payload: the_stuff \r\n    };\r\n}\r\nexport function changeRoot(the_stuff) {\r\n    return {\r\n        type: CHANGE_ROOT,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeAccidental(the_stuff) {\r\n    return {\r\n        type: CHANGE_ACCIDENTAL,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeMode(the_stuff) {\r\n    return {\r\n        type: CHANGE_MODE,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeTriNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_TRI_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeExtNotes(the_stuff) {\r\n    return {\r\n        type: CHANGE_EXT_NOTES,\r\n        payload: the_stuff\r\n    }\r\n}\r\nexport function changeDiagramIndex(j, i) {\r\n    return {\r\n        type: CHANGE_DIAGRAM_INDEX,\r\n        payload: {\r\n            active_index: j,\r\n            diagram_index: i\r\n        }\r\n    }\r\n} \r\nexport function changeSelectedChord(j, i) {\r\n    return {\r\n        type: CHANGE_SELECTED_CHORD,\r\n        payload: {\r\n            active_index: j,\r\n            visible_index: i\r\n        }\r\n    }\r\n} ","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\n// FROM:\r\n// https://alligator.io/react/tabs-component/\r\nclass Tab extends Component {\r\n    static propTypes = {\r\n        activeTab: PropTypes.string.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func.isRequired,\r\n    }\r\n    onClick = () => {\r\n        const {label, onClick} = this.props;\r\n        onClick(label);\r\n    }\r\n     \r\n    render() {\r\n        const {\r\n            onClick,\r\n            props: {\r\n                activeTab,\r\n                label,\r\n            },\r\n        } = this;\r\n        let label_arr = label.split(' ');\r\n        \r\n        let className = 'tab-list-item';\r\n\r\n        if (activeTab === label) {\r\n            className += ' tab-list-active';\r\n        }\r\n\r\n        return (\r\n            <li\r\n                className = {className}\r\n                onClick = {onClick}\r\n            ><h6>{label_arr[0]}<br/>{label_arr[1]}</h6></li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tab;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nimport Tab from './Tab';\r\n\r\n// FROM: \r\n// https://alligator.io/react/tabs-component/\r\nclass Tabs extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.instanceOf(Array).isRequired,\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: this.props.children[0].props.label\r\n        };\r\n    }\r\n\r\n    onClickTabItem = (tab) => {\r\n        this.setState({activeTab: tab});\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            onClickTabItem,\r\n            props: {\r\n                children,\r\n            },\r\n            state: {\r\n                activeTab,\r\n            }\r\n        } = this;\r\n\r\n        return (\r\n            <div className = 'tabs'>\r\n                <div className='tab-content'>\r\n                    {children.map((child) => {\r\n                        if (child.props.label !== activeTab) {\r\n                            return undefined;\r\n                        }\r\n                        return child.props.children;\r\n                    })}\r\n                </div>\r\n                <ol className = 'tab-list'>\r\n                    {children.map((child) => {\r\n                        const { label} = child.props;\r\n                        return (\r\n                            <Tab\r\n                                activeTab = {activeTab}\r\n                                key = {label}\r\n                                label = {label}\r\n                                onClick = {onClickTabItem}\r\n                            />\r\n                        );\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Tabs;","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        chords: state.chords,\r\n        active_index: state.active_index\r\n    }\r\n}\r\n\r\nclass connected_Selector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n    handleScroll() {\r\n        let el = document.getElementById('chordHolder')\r\n        let scrollOffset = el.scrollLeft;\r\n        let itemWidth = el.offsetWidth / 3.0;\r\n        let i = 0;\r\n        while ((i) * itemWidth <= scrollOffset - (itemWidth/2.0)) {\r\n            i++;\r\n        }\r\n        if (i !== this.props.active_index) {\r\n            store.dispatch( changeActiveIndex(i) );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                chords,\r\n                active_index,\r\n            },\r\n            handleScroll\r\n        } = this;\r\n        return (\r\n            <ul id='chordHolder' onScroll={handleScroll}>\r\n                <li></li>\r\n                {chords.map((child, index) => {\r\n                    if (index === active_index) { \r\n                        return (<li className='selected'><h6>{child.getNameAsString()}</h6></li>);\r\n                    } else {\r\n                        return (<li><h6>{child.getNameAsString()}</h6></li>);\r\n                    }\r\n                })}\r\n                <li></li>\r\n            </ul>\r\n        );\r\n    }\r\n}\r\nconst Selector = connect(mapStateToProps)(connected_Selector); \r\nexport default Selector;\r\n","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeRoot,\r\n    changeAccidental\r\n} from './actions/index.js'\r\n\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        root: state.chords[state.active_index].root,\r\n        accidental: state.chords[state.active_index].accidental\r\n    }\r\n}\r\n/*function mapDispatchToProps(dispatch) {\r\n    return {\r\n        changeRoot: root => dispatch(changeRoot(root))\r\n    },\r\n}*/\r\n\r\nclass connected_RSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n/*            active_index: store.getState().active_index,\r\n            root: store.getState().chords[ store.getState().active_index ].root,*/\r\n            /*accidental: store.getState().chords[ store.getState().active_index ].accidental,*/\r\n            showRMenu: false,\r\n            showAMenu: false,\r\n        }\r\n    }\r\n    rootClicker = () => {\r\n        this.setState({showRMenu: true});\r\n    }\r\n    rootSelector = (letter) => {\r\n        this.setState({\r\n            showRMenu: false,\r\n        });\r\n        store.dispatch(changeRoot(letter))\r\n    }\r\n    accClicker = () => {\r\n        this.setState({showAMenu: true});\r\n    }\r\n    accSelector = (symbol) => {\r\n        this.setState({\r\n            showAMenu: false,\r\n        });\r\n        store.dispatch(changeAccidental(symbol))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                root,\r\n                accidental\r\n            },\r\n            state: {\r\n                showRMenu,\r\n                showAMenu\r\n            },\r\n            rootClicker,\r\n            rootSelector,\r\n            accClicker,\r\n            accSelector\r\n        } = this;\r\n        let r;\r\n        let a;\r\n        if (showRMenu) {\r\n            r = \r\n                <ul id='root-menu'>\r\n                    <li onClick={rootSelector.bind(this, A)}><h6>{A}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, B)}><h6>{B}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, C)}><h6>{C}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, D)}><h6>{D}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, E)}><h6>{E}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, F)}><h6>{F}</h6></li>\r\n                    <li onClick={rootSelector.bind(this, G)}><h6>{G}</h6></li>\r\n                </ul>\r\n        } else {\r\n            r = <div id='the-root' onClick={rootClicker}><h6>{root}</h6></div>\r\n        }\r\n        if (showAMenu) {\r\n            a = \r\n                <ul id='accidental-menu'>\r\n                    <li onClick={accSelector.bind(this, SHARP)}><h6>{SHARP}</h6></li>\r\n                    <li onClick={accSelector.bind(this, NATURAL)}><h6>{NATURAL}</h6></li>\r\n                    <li onClick={accSelector.bind(this, FLAT)}><h6>{FLAT}</h6></li>\r\n                </ul>\r\n        } else {\r\n            a = <div id='the-accidental' onClick={accClicker}><h6>{accidental}</h6></div>\r\n        }\r\n        return(\r\n            <div id='root-container'>\r\n                {r}\r\n                {a}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst RSelect = connect(mapStateToProps)(connected_RSelect); \r\nexport default RSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeMode} from './actions/index.js'\r\nimport {IONIAN, \r\n    DORIAN, \r\n    PHRYGIAN, \r\n    LYDIAN, \r\n    MIXOLYDIAN, \r\n    AEOLIAN, \r\n    LOCRIAN} from './constants/music.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        mode: state.chords[state.active_index].mode,\r\n    }\r\n}\r\n\r\nclass connected_MSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showMenu: false,\r\n        }\r\n    }\r\n    modeClicker = () => {\r\n        this.setState({showMenu: true});\r\n    }\r\n    modeSelector = (string) => {\r\n        this.setState({\r\n            showMenu: false,\r\n        });\r\n        store.dispatch(changeMode(string))\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                mode\r\n            },\r\n            state: {\r\n                showMenu,\r\n            },\r\n            modeClicker,\r\n            modeSelector,\r\n        } = this;\r\n        \r\n        if (!showMenu) {\r\n            return(    \r\n              <div id='mode-container'>\r\n                <div id='the-mode' onClick={modeClicker}><h6>{mode}</h6></div>\r\n              </div>  \r\n            );\r\n        } else {\r\n            return(\r\n                <div id='mode-container'>\r\n                    <ul id='mode-list'>\r\n                        <li onClick={modeSelector.bind(this, IONIAN)}><h6>{IONIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, DORIAN)}><h6>{DORIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, PHRYGIAN)}><h6>{PHRYGIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LYDIAN)}><h6>{LYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, MIXOLYDIAN)}><h6>{MIXOLYDIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, AEOLIAN)}><h6>{AEOLIAN}</h6></li>\r\n                        <li onClick={modeSelector.bind(this, LOCRIAN)}><h6>{LOCRIAN}</h6></li>\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nconst MSelect = connect(mapStateToProps)(connected_MSelect); \r\nexport default MSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeTriNotes} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tri_notes: state.chords[state.active_index].tri_notes,\r\n    }\r\n}\r\n\r\nclass connected_TSelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    triItemOnClick = (index) => {\r\n        let arr = this.props.tri_notes.slice();\r\n        for (let i= 0; i < arr.length; i++) {\r\n        }\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeTriNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                tri_notes\r\n            },\r\n            triItemOnClick\r\n        } = this\r\n        console.log(tri_notes);\r\n        const tri_list_items = tri_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {triItemOnClick.bind(this, index)}> <h6>{index * 2 + 1}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='tri-list'>\r\n                {tri_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst TSelect = connect(mapStateToProps)(connected_TSelect); \r\nexport default TSelect;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {changeExtNotes} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport store from './store/index.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ext_notes: state.chords[state.active_index].ext_notes,\r\n    }\r\n}\r\n\r\nclass connected_ESelect extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    extItemOnClick = (index) => {\r\n        let arr = this.props.ext_notes.slice();\r\n        arr[index] = !arr[index];\r\n        store.dispatch(changeExtNotes(arr));\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                ext_notes\r\n            },\r\n            extItemOnClick\r\n        } = this\r\n\r\n        const ext_list_items = ext_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {extItemOnClick.bind(this, index)}> <h6>{index * 2 + 7}</h6> </li>\r\n        });\r\n        return (\r\n            <ul id='ext-list'>\r\n                {ext_list_items}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nconst ESelect = connect(mapStateToProps)(connected_ESelect); \r\nexport default ESelect;\r\n","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {changeDiagramIndex} from './actions/index.js';\r\nimport ChordTab from './chordTab.js';\r\nimport {general_chord, general_note} from './classes/generalChord.js';\r\nimport {chord_finder} from './classes/specificChord.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        active_index: state.active_index,\r\n        specific_chords: state.specific_chords[state.active_index],\r\n        visible_diagram_indices: state.visible_diagram_indices,\r\n        selected_chord_index: state.selected_indices[state.active_index],\r\n        scale: state.scales[state.active_index],\r\n        colors: state.colors\r\n    }\r\n}\r\n\r\nclass connected_ChordViz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n    handleScroll() {\r\n        let el = document.getElementById('svg-list')\r\n        let scrollOffset = el.scrollLeft;\r\n        let itemWidth = el.offsetWidth;\r\n        let i = 0;\r\n        while ((i) * itemWidth <= scrollOffset - (itemWidth / 2)) {\r\n            i++;\r\n        }\r\n        console.log(itemWidth + \"   \" + el.offsetWidth + \" \"+ scrollOffset);\r\n       /* console.log('****************************');\r\n        console.log(i*itemWidth);\r\n        console.log(scrollOffset - (itemWidth/2.0));\r\n        console.log('****************************');*/\r\n        if (i !== this.props.visible_diagram_indices[this.props.active_index]) {\r\n            store.dispatch( changeDiagramIndex(this.props.active_index, i) );\r\n        }\r\n    }\r\n    makeSVG = (notes, scale, colors) => {\r\n        let string_number = notes.length;\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 5;\r\n        let fret_span = 100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (fret_span - 7) + '%';\r\n        let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n        \r\n        let circle_radius = (string_span / 2.5);\r\n        let radius_str = circle_radius +'%';\r\n        \r\n        let hi_fret = -100;\r\n        let lo_fret = 100;\r\n        for (let i = 0; i < notes.length; i++) {\r\n            if (notes[i] !== null && notes[i].index !== 0 && notes[i].index < lo_fret) {\r\n                lo_fret = notes[i].index;\r\n            }\r\n            if (notes[i] !== null && notes[i].index !== 0 && notes[i].index > hi_fret) {\r\n                hi_fret = notes[i].index;\r\n            }\r\n        }\r\n        let chord_span;\r\n        if (hi_fret === 100) {\r\n            chord_span = 0;\r\n        } else {\r\n            chord_span = hi_fret - lo_fret + 1;\r\n        }\r\n        let chord_padding = Math.floor((fret_number - chord_span) / 2);\r\n        \r\n        let chord_shift = lo_fret - chord_padding;\r\n        let diagram_base;\r\n        if(chord_shift < 0) {\r\n            chord_shift = 1;\r\n            diagram_base = 1\r\n        } else {\r\n            diagram_base = chord_shift;\r\n        }\r\n\r\n        let shifted_notes = []\r\n        for (let i = 0; i < notes.length; i++) {\r\n            if (notes[i] === null){\r\n                shifted_notes.push(null);\r\n            } else if (notes[i].index === 0) {\r\n                shifted_notes.push({index:1, note:notes[i].note});\r\n            } else {\r\n                shifted_notes.push({index:notes[i].index - chord_shift + 2, note:notes[i].note});\r\n            }\r\n        }\r\n        return(\r\n                <svg class='the-svg' style={{margin: 'auto', width:'50%', height:'50%'}}>\r\n                    {y_coords.map((y_coord, index)=> {\r\n                        if (index === 0) {\r\n                            return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                        } else {\r\n                            return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                        }\r\n                    })}\r\n                    <text x='2%' y={(fret_span-1) + '%'} fill=\"white\">0</text>\r\n                    <text x='2%' y={(fret_span+5) + '%'} fill=\"white\">{diagram_base}</text>\r\n                    {x_coords.map(x_coord => {\r\n                        return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                    })}\r\n                    {shifted_notes.map((note, index) => {\r\n                        if (note === null) {\r\n                            return\r\n                        } else {\r\n                            let x_center = string_span*(index+1) +'%';\r\n                            let y_center = fret_span*note.index - circle_radius + '%';\r\n                            let color;\r\n                            for(let i = 0; i<colors.length; i++) {\r\n                                if (note.note.root === scale[i].root &&\r\n                                    note.note.accidental === scale[i].accidental) {\r\n                                        color=colors[i];\r\n                                    }\r\n                                }  \r\n                            return <circle cx= {x_center} cy={y_center} r={radius_str} fill={color}></circle>\r\n                        }\r\n                    })}\r\n                </svg>\r\n        );\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                specific_chords,\r\n                selected_chord_index,\r\n                scale,\r\n                colors\r\n            },\r\n            handleScroll,\r\n            makeSVG\r\n        } = this;\r\n/******************************************************************************************** */\r\n\r\n        //let arrss = [[1, null, 1, 1, 1, null]];\r\n        //let arrs = [[9, 11, 11, 10, 9, 9], [7, null, 8, 8, 7, null], [4, null, 4, 4, 4, null]];\r\n        return(\r\n            <ul id='svg-list' onScroll={handleScroll}>\r\n                {specific_chords.map((arr, index) => {\r\n                    if (index === selected_chord_index) {\r\n                        return <li class='selected'><h6 id='meh'>Selected</h6> {makeSVG(arr, scale, colors)}</li>\r\n                    } else {\r\n                        return <li>{makeSVG(arr, scale, colors)}</li>\r\n                    }\r\n                    \r\n                })}    \r\n            </ul>\r\n        );\r\n    }\r\n}\r\nconst ChordViz = connect(mapStateToProps)(connected_ChordViz); \r\nexport default ChordViz;","import React, { Component } from 'react';\r\nimport RSelect from './rootSelector.js';\r\nimport MSelect from './modeSelector.js';\r\nimport TSelect from './triSelector.js';\r\nimport ESelect from './extSelector.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\n\r\nclass DCPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n /*       this.state = {\r\n            root: 'C',\r\n            accidental: '=',\r\n            mode: 'Aeolian',\r\n            tri_notes: [true, true, false],\r\n            ext_notes: [true, false, false, false]\r\n        }*/\r\n    }\r\n    /*triOnClick = (index) => {\r\n        let arr = this.state.tri_notes;\r\n        arr[index] = !arr[index];\r\n        this.setState({tri_notes: arr})\r\n        console.log(index);\r\n    }*/\r\n   /* extOnClick = (index) => {\r\n        let arr = this.state.ext_notes;\r\n        arr[index] = !arr[index];\r\n        this.setState({ext_notes: arr})\r\n        console.log(index);\r\n    }*/\r\n\r\n    render() {\r\n       /* const {\r\n            triOnClick,\r\n            extOnClick\r\n        } = this*/\r\n       /* const tri_list_items = this.state.tri_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {triOnClick.bind(this, index)}> <h6>{index * 2 + 1}</h6> </li>\r\n        });*/\r\n        /*const ext_list_items = this.state.ext_notes.map(function(bool, index){\r\n            let class_list=\"\"\r\n            if (bool) {\r\n                class_list += 'selected-note';\r\n            } \r\n            return <li \r\n                className={class_list}\r\n                key={index}\r\n                onClick = {extOnClick.bind(this, index)}> <h6>{index * 2 + 7}</h6> </li>\r\n        });*/\r\n\r\n        return (\r\n            <div class='panel-wrap'>\r\n                <div id='theroot'>\r\n                    <h3>Root:</h3>\r\n                    <RSelect />\r\n                </div>\r\n                <div id='mode'>\r\n                    <h3>Mode:</h3>\r\n                    <MSelect />\r\n                </div>\r\n                <div id='note-selection'>\r\n                    <div id='triad'>\r\n                        <h3><span>Triad:</span></h3>\r\n                        <TSelect />\r\n                    </div>\r\n                    <div id='extensions'>\r\n                        <h3><span>Ext:</span></h3>\r\n                        <ESelect />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DCPanel;\r\n\r\n/*\r\n        <ul id='tri-list'>\r\n            <li id='one'>1</li>\r\n            <li id='three'>3</li>\r\n            <li id='five'>5</li>\r\n        </ul>\r\n*/\r\n\r\n/*\r\n        makeTriList = () => {\r\n            this.state.tri_notes.map(function(bool, index){\r\n                let class_list=\"\"\r\n                if (bool) {\r\n                    class_list += 'selected-note';\r\n                } \r\n                return <li \r\n                    className={class_list}\r\n                    label={index}\r\n                    onClick = {liOnClick}> {index * 2 + 1} </li>\r\n            });\r\n        }\r\n        makeExtList = () => {\r\n            this.state.ext_notes.map(function(bool, index){\r\n                let class_list=\"\"\r\n                if (bool) {\r\n                    class_list += 'selected-note';\r\n                } \r\n                return <li \r\n                    className={class_list}\r\n                    label={index}\r\n                    onClick = {liOnClick}> {index * 2 + 7} </li>\r\n            });\r\n        }\r\n        tri_list_items = makeTriList();\r\n        ext_list_items = makeExtList();\r\n*/","\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {} from './actions/index.js'\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT} from './constants/music.js';\r\nimport {note_instance, chord_instance} from './classes/specificChord.js';\r\n\r\nclass ChordTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n    render() {\r\n/*        let notes = [\r\n            {'string': 1, 'fret': 3},\r\n            {'string': 3, 'fret': 4},\r\n            {'string': 4, 'fret': 4},\r\n            {'string': 5, 'fret': 3},\r\n        ]*/\r\n        let makeSVG = (notes) => {\r\n            let string_number = notes.length;\r\n            let string_span = 100/(string_number + 1);\r\n\r\n            let x_coords = [];\r\n            for (let i = 0; i < string_number; i++) {\r\n                x_coords.push(((i+1) * string_span) +'%');\r\n            }\r\n            let fret_number = 5;\r\n            let fret_span = 100/(fret_number + 1);\r\n            let y_coords = [];\r\n            for (let i = 0; i < fret_number + 1; i++) {\r\n                console.log(\"fretspan: \" + fret_span);\r\n                console.log(\"fret: \" + (i+1));\r\n\r\n                y_coords.push(((i+1) * fret_span) + '%');\r\n            }\r\n            console.log('*************y_coords***********');\r\n            console.log(\"fretspan: \" + fret_span);\r\n            console.log(y_coords);\r\n            console.log('*************y_coords***********\\n');\r\n            let fret_x1 = (fret_span - 7) + '%';\r\n            let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n            \r\n            let circle_radius = (string_span / 2.5);\r\n            let radius_str = circle_radius +'%';\r\n            \r\n            let hi_fret = -100;\r\n            let lo_fret = 100;\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] < lo_fret) {\r\n                    lo_fret = notes[i];\r\n                }\r\n                if (notes[i] !== 0 && notes[i] !== null && notes[i] > hi_fret) {\r\n                    hi_fret = notes[i];\r\n                }\r\n            }\r\n            let chord_span;\r\n            if (hi_fret === 100) {\r\n                chord_span = 0;\r\n            } else {\r\n                chord_span = hi_fret - lo_fret + 1;\r\n            }\r\n            let chord_padding = Math.floor((fret_number - chord_span) / 2);\r\n            \r\n            let chord_shift = lo_fret - chord_padding;\r\n            console.log(\"hi_fret: \" + hi_fret);\r\n            console.log(\"lo_fret: \" + lo_fret);\r\n            console.log(\"chord_span: \" + chord_span);\r\n            console.log(\"chord_padding: \" + chord_padding);\r\n            console.log(\"chord_shift: \" + chord_shift);\r\n            console.log('0');\r\n            console.log(lo_fret - chord_padding);\r\n            console.log(hi_fret + chord_padding);\r\n            console.log('*********************************');\r\n            let shifted_notes = []\r\n            for (let i = 0; i < notes.length; i++) {\r\n                if (notes[i] === null){\r\n                    shifted_notes.push(null);\r\n                } else if (notes[i] === 0) {\r\n                    shifted_notes.push(1);\r\n                } else {\r\n                    shifted_notes.push(notes[i] - chord_shift + 2);\r\n                }\r\n            }\r\n            return(\r\n                <svg style={{width:'100%', height:'100%'}}>\r\n                    {y_coords.map((y_coord, index)=> {\r\n                        if (index === 0) {\r\n                            return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                        } else {\r\n                            return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                        }\r\n                    })}\r\n                    <text x='2%' y={(fret_span-1) + '%'} fill=\"white\">0</text>\r\n                    <text x='2%' y={(fret_span+5) + '%'} fill=\"white\">{chord_shift}</text>\r\n                    {x_coords.map(x_coord => {\r\n                        return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                    })}\r\n                        {console.log('*************y_centers***********')}\r\n\r\n                    {shifted_notes.map((note, index) => {\r\n                        if (note === null) {\r\n                            return\r\n                        } else {\r\n                            let x_center = string_span*(index+1) +'%';\r\n                            let y_center = fret_span*note - circle_radius + '%';\r\n                            console.log(\"fretspan: \" + fret_span);\r\n                            console.log(\"note: \" + note);\r\n                            console.log(y_center);\r\n                            return <circle cx= {x_center} cy={y_center} r={radius_str} fill='yellow'></circle>\r\n                        }\r\n                    })}\r\n                    {console.log('*************y_centers***********\\n')}\r\n                </svg>\r\n            );\r\n        }\r\n        /*let myChord = new chord_instance(); \r\n        let string_number = 6\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 5;\r\n        let fret_span =  100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (fret_span - 7) + '%'\r\n        let fret_x2 = ((fret_span * (string_number-1)) + 7) + '%';\r\n\r\n        let circle_radius = (string_span / 2.5);\r\n        let radius_str = circle_radius +'%';\r\n        let x_coord = string_span*1 + '%';\r\n        let y_coord = fret_span*5 - circle_radius + '%';\r\n        \r\n        console.log('x*************************')\r\n        console.log (x_coords);\r\n        console.log(x_coord);\r\n        console.log('y**********************')\r\n        console.log(y_coord);\r\n        console.log(y_coords);*/\r\n        //let arr = [7, null, 8, 8, 7, null];\r\n        let arr = [9, 11, 11, 10, 9, 9];\r\n        return(\r\n                makeSVG(arr)\r\n                /*<svg style={{width:'100%', height:'100%'}}>\r\n                    <line x1={fret_x1} y1={y_coords[0]} x2={fret_x2} y2={y_coords[0]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[1]} x2={fret_x2} y2={y_coords[1]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[2]} x2={fret_x2} y2={y_coords[2]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[3]} x2={fret_x2} y2={y_coords[3]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[4]} x2={fret_x2} y2={y_coords[4]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    <line x1={fret_x1} y1={y_coords[5]} x2={fret_x2} y2={y_coords[5]} style={{stroke: 'gold', width: '10'}}></line>\r\n                    \r\n                    <line x1={x_coords[5]} y1='0%' x2={x_coords[5]} y2='100%' style={{stroke: 'white', width: '10'}}></line>\r\n                    <line x1={x_coords[4]} y1='0%' x2={x_coords[4]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[3]} y1='0%' x2={x_coords[3]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[2]} y1='0%' x2={x_coords[2]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[1]} y1='0%' x2={x_coords[1]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    <line x1={x_coords[0]} y1='0%' x2={x_coords[0]} y2='100%' style={{stroke: 'white', width: '10px'}}></line>\r\n                    {notes.map(note => {\r\n                        let x_coord = string_span*note.string +'%';\r\n                        let y_coord = fret_span*note.fret-circle_radius + '%';\r\n                        return <circle cx= {x_coord} cy={y_coord} r={radius_str} fill='yellow'></circle>\r\n                    })}\r\n\r\n                </svg>*/\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChordTab;","// Copyright 2019 Ross Hall\r\n\r\nimport React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\nimport ChordViz from './chordViz.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        specific_chords_length: state.specific_chords[state.active_index].length,\r\n        visible_diagram_index: state.visible_diagram_indices[state.active_index],\r\n        selected_chord_index: state.selected_indices[state.active_index],\r\n    }\r\n}\r\n\r\nclass connected_ChordBackdrop extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                specific_chords_length,\r\n                visible_diagram_index\r\n            }\r\n        } = this;\r\n        let left_arrow = null;\r\n        let right_arrow = null;\r\n        if (visible_diagram_index !== 0) {\r\n            left_arrow = <div id='l-cDiagram-arrow'></div>\r\n        }\r\n        if (visible_diagram_index !== specific_chords_length - 1) {\r\n            right_arrow = <div id='r-cDiagram-arrow'></div>\r\n        }\r\n        return (\r\n            <div id=\"chordBackdrop\">\r\n                <ChordViz />\r\n                <h3 id='index-indicator'>{visible_diagram_index + 1} / {specific_chords_length}</h3>\r\n                {left_arrow}\r\n                {right_arrow}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst ChordBackdrop = connect(mapStateToProps)(connected_ChordBackdrop); \r\nexport default ChordBackdrop;\r\n","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport {changeDiagramIndex} from './actions/index.js';\r\nimport ChordTab from './chordTab.js';\r\nimport {general_chord, general_note} from './classes/generalChord.js';\r\nimport {chord_finder} from './classes/specificChord.js';\r\nimport PropTypes from 'prop-types'; // data validation\r\nimport {A, \r\n    B, \r\n    C, \r\n    D, \r\n    E, \r\n    F, \r\n    G,\r\n    SHARP,\r\n    NATURAL,\r\n    FLAT,\r\n    MIXOLYDIAN} from './constants/music.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        the_chord: state.specific_chords[state.active_index][state.selected_indices[state.active_index]],\r\n        scale: state.scales[state.active_index],\r\n        colors: state.colors\r\n    }\r\n}\r\n\r\nclass connected_BoardViz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    makeSVG = (notes, scale, colors) => {\r\n        let string_number = 6\r\n        let string_span = 100/(string_number + 1);\r\n\r\n        let x_coords = [];\r\n        for (let i = 0; i < string_number; i++) {\r\n            x_coords.push(((i+1) * string_span) +'%');\r\n        }\r\n        let fret_number = 16;\r\n        let fret_span = 100/(fret_number + 1);\r\n        let y_coords = [];\r\n        for (let i = 0; i < fret_number + 1; i++) {\r\n            y_coords.push(((i+1) * fret_span) + '%');\r\n        }\r\n        let fret_x1 = (string_span - 7) + '%';\r\n        let fret_x2 = ((string_span * (string_number)) + 7) + '%';\r\n        \r\n        let circle_radius = (string_span / 5.5);\r\n        let radius_str = circle_radius +'%';\r\n        \r\n        return(\r\n                <svg class='the-svg' style={{margin: 'auto', width:'30%', height:'70%'}}>\r\n                    {y_coords.map((y_coord, index)=> {\r\n                        if (index === 0) {\r\n                            return <line x1='0%' y1={y_coord} x2='100%' y2={y_coord} style={{stroke: 'orange', width: '12'}}></line>;\r\n                        } else {\r\n                            return <line x1={fret_x1} y1={y_coord} x2={fret_x2} y2={y_coord} style={{stroke: 'gold', width: '10'}}></line>;\r\n                        }\r\n                    })}\r\n                    {x_coords.map(x_coord => {\r\n                        return <line x1={x_coord} y1='0%' x2={x_coord} y2='100%' style={{stroke: 'white', width: '10'}}></line>;\r\n                    })}\r\n                    {notes.map((note, index) => {\r\n                        if (note === null) {\r\n                            return\r\n                        } else {\r\n                            let x_center = string_span*(index+1) +'%';\r\n                            let y_center = fret_span*note.index - circle_radius + '%';\r\n                            let color;\r\n                            for(let i = 0; i<colors.length; i++) {\r\n                                if (note.note.root === scale[i].root &&\r\n                                    note.note.accidental === scale[i].accidental) {\r\n                                        color=colors[i];\r\n                                    }\r\n                                }  \r\n                            return <circle cx= {x_center} cy={y_center} r={radius_str} fill={color}></circle>\r\n                        }\r\n                    })}\r\n                </svg>\r\n        );\r\n    }\r\n    render() {\r\n        const {\r\n            props: {\r\n                the_chord,\r\n                scale,\r\n                colors\r\n            },\r\n            makeSVG\r\n        } = this;\r\n/******************************************************************************************** */\r\n\r\n        console.log(the_chord);\r\n        return(\r\n            makeSVG(the_chord, scale, colors)\r\n        );\r\n    }\r\n}\r\nconst BoardViz = connect(mapStateToProps)(connected_BoardViz); \r\nexport default BoardViz;\r\n/*{shifted_notes.map((note, index) => {\r\n    if (note === null) {\r\n        return\r\n    } else {\r\n        let x_center = string_span*(index+1) +'%';\r\n        let y_center = fret_span*note.index - circle_radius + '%';\r\n        let color;\r\n        for(let i = 0; i<colors.length; i++) {\r\n            if (note.note.root === scale[i].root &&\r\n                note.note.accidental === scale[i].accidental) {\r\n                    color=colors[i];\r\n                }\r\n            }  \r\n        return <circle cx= {x_center} cy={y_center} r={radius_str} fill={color}></circle>\r\n    }\r\n})}*/","import React, { Component } from 'react';\r\nimport store from './store/index.js';\r\nimport {connect} from 'react-redux';\r\nimport theReducer from './reducers/index.js';\r\nimport { changeActiveIndex } from './actions/index.js';\r\nimport ChordViz from './chordViz.js';\r\nimport BoardViz from './boardViz.js';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        specific_chords_length: state.specific_chords[state.active_index].length,\r\n        visible_diagram_index: state.visible_diagram_indices[state.active_index],\r\n        selected_chord_index: state.selected_indices[state.active_index],\r\n    }\r\n}\r\n\r\nclass connected_BoardBackdrop extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {props: {\r\n                specific_chords_length,\r\n                visible_diagram_index\r\n            }\r\n        } = this;\r\n        return (\r\n            <div id=\"chordBackdrop\">\r\n                <BoardViz />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst BoardBackdrop = connect(mapStateToProps)(connected_BoardBackdrop); \r\nexport default BoardBackdrop;\r\n\r\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Header from './Header.js';\nimport Cards, {Card1, Card2, Card3} from './Cards.js';\nimport Tabs from './Tabs.js';\nimport Selector from './Selector.js';\nimport DCPanel from './defineChordPanel.js';\nimport ChordViz from './chordViz.js';\nimport ChordBackdrop from './chordBackdrop.js';\nimport BoardBackdrop from './boardBackdrop.js';\nimport './App.css';\n\nconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nlet letter_options = letters.map(opt => ({label: opt, value: opt}));\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            view_progression: false,\n        }\n    }\n    viewClicker = () => {\n        this.setState({view_progression: !this.state.view_progression});\n    }\n    triRotate() {\n        let el = document.getElementById('slide')\n        let scroll_percentage = el.scrollTop / (el.scrollHeight-el.clientHeight);\n        let rotation = 540 * scroll_percentage;\n        let tri = document.getElementById('triangle');\n        tri.style.transform = 'rotate('+rotation+'deg)';         \n    }\n    render() {\n        window.screen.orientation.lock(\"portrait-primary\");\n        function scrollTo() {\n            let duration = 400;\n            let el = document.getElementById('slide');\n            let height = el.scrollHeight-el.clientHeight;\n\n            let scroll_percentage = el.scrollTop / (el.scrollHeight-el.clientHeight);\n            let to;\n            if(scroll_percentage < .5) {\n                to = height;\n            } else {\n                to = 0\n            }\n            var difference = to - el.scrollTop;\n            var perTick = difference / duration * 10;\n            let scrolling = setInterval(function() {\n                el.scrollTop = el.scrollTop + perTick;\n                if (el.scrollTop === to) {\n                    clearInterval(scrolling);\n                }\n            }, 10);\n        }\n        const {\n            state: {\n                view_progression\n            },\n            viewClicker,\n            triRotate,\n        } = this;\n\n        let backdrop;\n        if (view_progression) {\n            backdrop = <BoardBackdrop />\n        } else {\n            backdrop = <ChordBackdrop />\n        }\n        return (\n            <div id='wrapper'>\n                <div id='tester'>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                    <h1>WHY WHY</h1>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n/*\n<div id='set' label='Unknown Button' style={{marginTop: '10%', alignContent: 'center'}}>\n<label>Set Note: </label>\n<input></input>\n<button>Submit</button>\n</div>\n*/\n\n/*\n<div id='botCardHolder'>\n<Card2 />\n</div>\n*/\n/*\n<div id='triHolder'>\n<div id='triangle' onClick={scrollTo}></div>\n</div>\n*/\n/*\n<div id=\"Wrapper\">\n<header className=\"App-header\">\n    <h1>Chordage</h1>\n    <div id='view-progression' onClick = {viewClicker}>\n        <h5 id='view-text'>View Progression</h5>\n    </div>\n</header>\n<div id='topCardHolder'>\n    <Card1 />\n</div>\n<div id=\"slide\" onScroll={triRotate}>\n    {backdrop}\n    <div id='spacer'></div>\n    <div id='description-wrap'>\n        <div id='tri-space'>\n            <Card2 />\n        </div>\n        <div id='description'>\n\n            <Selector />\n            <Tabs>\n                <div id='define' label='Define Chord'>\n                    <DCPanel />\n                </div>\n\n                <div id='search' label='Search Space'>\n                    <div style={{marginBottom: '10%', marginTop: '10%', textAlign: 'center'}}>\n                        <label>Low Fret: </label>\n                        <input></input>\n                    </div>\n                    <div>\n                        <label>High Fret: </label>\n                        <input></input>\n                    </div>\n                    <button>Submit</button>\n                </div> \n            </Tabs>\n            <div id='triHolder'>\n              <div id='tri-box'>\n                <div id='triangle' onClick={scrollTo}></div>\n              </div>\n            </div>\n        </div>\n    </div>\n</div>\n</div>*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/index.js';\nimport { Provider } from 'react-redux';\n/*import ADD_CHORD from \"./actionTypes/index\";*/\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App /> \n    </Provider>,\n    document.getElementById('root')\n    \n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}